"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const events_1 = tslib_1.__importDefault(require("../../events"));
const picker_1 = tslib_1.__importStar(require("../../model/picker"));
const helper_1 = tslib_1.__importDefault(require("../helper"));
let nvim;
let picker;
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
afterEach(async () => {
    if (picker)
        picker.dispose();
    picker = undefined;
    await helper_1.default.reset();
});
async function inputChar(ch) {
    await picker.onInputChar('picker', ch);
}
const items = [{ label: 'foo' }, { label: 'bar' }];
describe('util', () => {
    it('should convert picker items', () => {
        expect((0, picker_1.toPickerItems)([{ label: 'foo' }])).toEqual([{ label: 'foo' }]);
        expect((0, picker_1.toPickerItems)(['foo'])).toEqual([{ label: 'foo' }]);
    });
});
describe('Picker create', () => {
    it('should show dialog with buttons', async () => {
        picker = new picker_1.default(nvim, { title: 'title', items: items.concat([{ label: 'three', picked: true }]) });
        let winid = await picker.show({ pickerButtons: true });
        expect(winid).toBeDefined();
        let id = await nvim.call('coc#float#get_related', [winid, 'buttons']);
        expect(id).toBeGreaterThan(0);
        let res = await nvim.call('sign_getplaced', [picker.buffer.id, { group: 'PopUpCocDialog' }]);
        expect(res[0].signs).toBeDefined();
        expect(res[0].signs[0].name).toBe('CocCurrentLine');
    });
    it('should cancel dialog when cancellation token requested', async () => {
        let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();
        picker = new picker_1.default(nvim, { title: 'title', items }, tokenSource.token);
        let winid = await picker.show({ pickerButtons: true, pickerButtonShortcut: true });
        expect(winid).toBeDefined();
        tokenSource.cancel();
        let win = nvim.createWindow(winid);
        await helper_1.default.waitValue(async () => {
            return await win.valid;
        }, false);
    });
    it('should cancel dialog without window', async () => {
        let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();
        picker = new picker_1.default(nvim, { title: 'title', items }, tokenSource.token);
        expect(picker.buffer).toBeUndefined();
        expect(picker.currIndex).toBe(0);
        await picker.onInputChar('picker', 'i');
        picker.changeLine(-1);
        tokenSource.cancel();
    });
});
describe('Picker key mappings', () => {
    it('should toggle selection mouse click bracket', async () => {
        picker = new picker_1.default(nvim, { title: 'title', items });
        let winid = await picker.show();
        await nvim.setVar('mouse_position', [winid, 1, 1]);
        await nvim.input('<LeftRelease>');
        await helper_1.default.wait(50);
        let buf = picker.buffer;
        let lines = await buf.getLines({ start: 0, end: 1, strictIndexing: false });
        expect(lines[0]).toMatch(/^\[x\]/);
        await inputChar('<LeftRelease>');
        await events_1.default.fire('FloatBtnClick', [picker.bufnr, 0]);
    });
    it('should change current line on mouse click label', async () => {
        picker = new picker_1.default(nvim, { title: 'title', items });
        let winid = await picker.show();
        await nvim.setVar('mouse_position', [winid, 2, 4]);
        await nvim.input('<LeftRelease>');
        await helper_1.default.wait(50);
        let buf = picker.buffer;
        let res = await nvim.call('sign_getplaced', [buf.id, { group: 'PopUpCocDialog' }]);
        expect(res[0].signs).toBeDefined();
        expect(res[0].signs[0].name).toBe('CocCurrentLine');
        await events_1.default.fire('FloatBtnClick', [picker.bufnr, 1]);
    });
    it('should cancel by <esc>', async () => {
        await helper_1.default.createDocument();
        picker = new picker_1.default(nvim, { title: 'title', items });
        let winid = await picker.show({ pickerButtons: true });
        expect(winid).toBeDefined();
        let fn = jest.fn();
        picker.onDidClose(fn);
        await picker.onInputChar('picker', '<esc>');
        expect(fn).toBeCalledTimes(1);
    });
    it('should confirm by <CR>', async () => {
        await helper_1.default.createDocument();
        let item = { label: 'item', description: 'description' };
        picker = new picker_1.default(nvim, { title: 'title', items: [item].concat(items) });
        let winid = await picker.show({ pickerButtons: true });
        expect(winid).toBeDefined();
        let fn = jest.fn();
        picker.onDidClose(fn);
        await picker.onInputChar('picker', ' ');
        await picker.onInputChar('picker', ' ');
        await picker.onInputChar('picker', 'k');
        await picker.onInputChar('picker', ' ');
        await events_1.default.fire('FloatBtnClick', [picker.bufnr + 1, 0]);
        await events_1.default.fire('FloatBtnClick', [picker.bufnr, 0]);
        expect(fn).toBeCalledTimes(1);
    });
    it('should move cursor by j, k, g & G', async () => {
        await helper_1.default.createDocument();
        picker = new picker_1.default(nvim, { title: 'title', items });
        function getSigns() {
            return nvim.call('sign_getplaced', [picker.buffer.id, { group: 'PopUpCocDialog' }]);
        }
        let winid = await picker.show({ pickerButtons: true });
        await helper_1.default.waitFloat();
        expect(winid).toBeDefined();
        await nvim.input('j');
        await helper_1.default.wait(100);
        let res = await getSigns();
        expect(res[0].signs[0].lnum).toBe(2);
        await nvim.input('k');
        await helper_1.default.wait(100);
        res = await getSigns();
        expect(res[0].signs[0].lnum).toBe(1);
        await nvim.input('G');
        await helper_1.default.wait(100);
        res = await getSigns();
        expect(res[0].signs[0].lnum).toBe(2);
        await nvim.input('g');
        await helper_1.default.wait(100);
        res = await getSigns();
        expect(res[0].signs[0].lnum).toBe(1);
    });
    it('should toggle selection by <space>', async () => {
        await helper_1.default.createDocument();
        picker = new picker_1.default(nvim, { title: 'title', items });
        let winid = await picker.show({
            maxWidth: 60,
            floatHighlight: 'CocFloating',
            floatBorderHighlight: 'Normal',
            rounded: true,
            confirmKey: 'r',
            pickerButtons: true
        });
        await helper_1.default.waitFloat();
        expect(winid).toBeDefined();
        let fn = jest.fn();
        picker.onDidClose(fn);
        await inputChar(' ');
        let lines = await nvim.call('getbufline', [picker.buffer.id, 1]);
        expect(lines[0]).toMatch('[x]');
        await inputChar('r');
    });
    it('should scroll forward & backward', async () => {
        await helper_1.default.createDocument();
        let items = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'].map(s => {
            return { label: s };
        });
        picker = new picker_1.default(nvim, { title: 'title', items });
        let event;
        picker.onDidClose(ev => {
            event = ev;
        });
        let winid = await picker.show({ maxHeight: 3 });
        expect(winid).toBeDefined();
        await picker.onInputChar('picker', '<C-f>');
        let info = await nvim.call('getwininfo', [winid]);
        expect(info[0]).toBeDefined();
        await picker.onInputChar('picker', '<C-b>');
        info = await nvim.call('getwininfo', [winid]);
        expect(info[0]).toBeDefined();
        await inputChar('<cr>');
        expect(event).toBeUndefined();
    });
    it('should fire selected items on cr', async () => {
        picker = new picker_1.default(nvim, { title: 'title', items: items.concat([{ label: 'three', picked: true }]) });
        let event;
        picker.onDidClose(e => {
            event = e;
        });
        let winid = await picker.show({ pickerButtons: true });
        expect(winid).toBeDefined();
        await inputChar('<cr>');
        expect(event).toEqual([2]);
    });
});
//# sourceMappingURL=picker.test.js.map