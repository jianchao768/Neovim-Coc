'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("../util/node");
const logger_1 = require("../logger");
const array_1 = require("../util/array");
const fuzzy_1 = require("../util/fuzzy");
const db_1 = require("./db");
const string_1 = require("../util/string");
const logger = (0, logger_1.createLogger)('list-history');
class InputHistory {
    constructor(prompt, name, db, cwd) {
        this.prompt = prompt;
        this.name = name;
        this.db = db;
        this.cwd = cwd;
        this._index = -1;
        this._filtered = [];
    }
    get loaded() {
        return this.db.getHistory(this.name, this.cwd);
    }
    get filtered() {
        return this._filtered;
    }
    get index() {
        return this._index;
    }
    static migrate(folder) {
        try {
            let files = node_1.fs.readdirSync(folder);
            files = files.filter(f => f.startsWith('list-') && f.endsWith('-history.json') && node_1.fs.statSync(node_1.path.join(folder, f)).isFile());
            if (files.length === 0)
                return;
            let db = new db_1.DataBase();
            for (let file of files) {
                let name = file.match(/^list-(.*)-history.json$/)[1];
                let content = node_1.fs.readFileSync(node_1.path.join(folder, file), 'utf8');
                let obj = JSON.parse(content);
                for (let [key, texts] of Object.entries(obj)) {
                    let folder = Buffer.from(key, 'base64').toString('utf8');
                    if (Array.isArray(texts)) {
                        texts.forEach(text => {
                            db.addItem(name, text, folder);
                        });
                    }
                }
            }
            files.forEach(f => {
                node_1.fs.unlinkSync(node_1.path.join(folder, f));
            });
            db.save();
        }
        catch (e) {
            logger.error(`Error on migrate history:`, e);
        }
    }
    get curr() {
        return this._index == -1 || this._filtered == null ? null : this._filtered[this._index];
    }
    filter() {
        let { input } = this.prompt;
        if (input === this.curr)
            return;
        this.historyInput = '';
        if (input.length > 0) {
            let codes = (0, fuzzy_1.getCharCodes)(input);
            this._filtered = this.loaded.filter(s => (0, fuzzy_1.fuzzyMatch)(codes, s));
        }
        else {
            this._filtered = this.loaded;
        }
        this._index = -1;
    }
    add() {
        let { db, prompt, cwd } = this;
        let { input } = prompt;
        if (!input || input.length < 2 || input == this.historyInput)
            return;
        db.addItem(this.name, input, cwd);
    }
    previous() {
        let { _filtered, _index } = this;
        if ((0, array_1.isFalsyOrEmpty)(_filtered))
            return;
        if (_index <= 0) {
            this._index = _filtered.length - 1;
        }
        else {
            this._index = _index - 1;
        }
        this.historyInput = this.prompt.input = (0, string_1.toText)(_filtered[this._index]);
    }
    next() {
        let { _filtered, _index } = this;
        if ((0, array_1.isFalsyOrEmpty)(_filtered))
            return;
        if (_index == _filtered.length - 1) {
            this._index = 0;
        }
        else {
            this._index = _index + 1;
        }
        this.historyInput = this.prompt.input = (0, string_1.toText)(_filtered[this._index]);
    }
}
exports.default = InputHistory;
//# sourceMappingURL=history.js.map