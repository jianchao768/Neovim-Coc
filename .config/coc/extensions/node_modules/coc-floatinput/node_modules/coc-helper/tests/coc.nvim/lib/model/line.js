"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const string_1 = require("../util/string");
/**
 * Build line with content and highlights.
 */
class LineBuilder {
    constructor(addSpace = false) {
        this.addSpace = addSpace;
        this._label = '';
        this._len = 0;
        this._highlights = [];
    }
    append(text, hlGroup, nested) {
        if (text.length == 0)
            return;
        let space = this._len > 0 && this.addSpace ? ' ' : '';
        let start = this._len + space.length;
        this._label = this._label + space + text;
        this._len = this._len + (0, string_1.byteLength)(text) + space.length;
        if (hlGroup) {
            this._highlights.push({
                hlGroup,
                span: [start, start + (0, string_1.byteLength)(text)]
            });
        }
        if (nested) {
            for (let item of nested) {
                let s = start + (0, string_1.byteIndex)(text, item.offset);
                let e = start + (0, string_1.byteIndex)(text, item.offset + item.length);
                this._highlights.push({
                    hlGroup: item.hlGroup,
                    span: [s, e]
                });
            }
        }
    }
    appendBuilder(builder) {
        let space = this._len > 0 && this.addSpace ? ' ' : '';
        let curr = this._len + space.length;
        this._label = this._label + space + builder.label;
        this._len = this._len + (0, string_1.byteLength)(builder.label) + space.length;
        this._highlights.push(...builder.highlights.map(item => {
            return {
                hlGroup: item.hlGroup,
                span: item.span.map(v => {
                    return curr + v;
                })
            };
        }));
    }
    get label() {
        return this._label;
    }
    get highlights() {
        return this._highlights;
    }
}
exports.default = LineBuilder;
//# sourceMappingURL=line.js.map