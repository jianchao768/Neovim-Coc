'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const manager_1 = tslib_1.__importDefault(require("./manager"));
class OnTypeFormatManager extends manager_1.default {
    register(selector, provider, triggerCharacters) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider,
            triggerCharacters: triggerCharacters !== null && triggerCharacters !== void 0 ? triggerCharacters : []
        });
    }
    couldTrigger(document, triggerCharacter) {
        for (let o of this.providers) {
            let { triggerCharacters, selector } = o;
            if (workspace_1.default.match(selector, document) > 0 && triggerCharacters.includes(triggerCharacter)) {
                return o.provider;
            }
        }
        return null;
    }
    async onCharacterType(character, document, position, token) {
        let items = this.getProviders(document);
        let item = items.find(o => o.triggerCharacters.includes(character));
        if (!item)
            return null;
        let formatOpts = await workspace_1.default.getFormatOptions(document.uri);
        return await Promise.resolve(item.provider.provideOnTypeFormattingEdits(document, position, character, formatOpts, token));
    }
}
exports.default = OnTypeFormatManager;
//# sourceMappingURL=onTypeFormatManager.js.map