"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const basic_1 = tslib_1.__importDefault(require("../../list/basic"));
const manager_1 = tslib_1.__importDefault(require("../../list/manager"));
const session_1 = tslib_1.__importDefault(require("../../list/session"));
const prompt_1 = tslib_1.__importDefault(require("../../list/prompt"));
const util_1 = require("../../util");
const helper_1 = tslib_1.__importDefault(require("../helper"));
let labels = [];
let lastItem;
let lastItems;
class SimpleList extends basic_1.default {
    constructor() {
        super();
        this.name = 'simple';
        this.detail = 'detail';
        this.options = [{
                name: 'foo',
                description: 'foo'
            }];
        this.addAction('open', item => {
            lastItem = item.label;
        }, { tabPersist: true });
        this.addMultipleAction('multiple', items => {
            lastItems = items;
        });
        this.addAction('parallel', async () => {
            await helper_1.default.wait(100);
        }, { parallel: true });
        this.addAction('reload', item => {
            lastItem = item.label;
        }, { persist: true, reload: true });
    }
    loadItems() {
        return Promise.resolve(labels.map(s => {
            return { label: s };
        }));
    }
}
let nvim;
let disposables = [];
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
afterEach(async () => {
    (0, util_1.disposeAll)(disposables);
    manager_1.default.reset();
    await helper_1.default.reset();
});
describe('list session', () => {
    describe('doDefaultAction()', () => {
        it('should throw error when default action does not exist', async () => {
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            list.defaultAction = 'foo';
            let len = list.actions.length;
            list.actions.splice(0, len);
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            let err;
            try {
                await manager_1.default.session.first();
            }
            catch (e) {
                err = e;
            }
            expect(err).toBeDefined();
            err = null;
            try {
                await manager_1.default.session.last();
            }
            catch (e) {
                err = e;
            }
            expect(err).toBeDefined();
        });
    });
    describe('doItemAction()', () => {
        it('should invoke multiple action', async () => {
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            await ui.selectAll();
            await manager_1.default.doAction('multiple');
            expect(lastItems.length).toBe(3);
            lastItems = undefined;
            await manager_1.default.session.doPreview(0);
            await manager_1.default.doAction('not_exists');
            let line = await helper_1.default.getCmdline();
            expect(line).toMatch('not found');
        });
        it('should invoke parallel action', async () => {
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            await ui.selectAll();
            let d = Date.now();
            await manager_1.default.doAction('parallel');
            expect(Date.now() - d).toBeLessThan(300);
        });
        it('should support tabPersist action', async () => {
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', '--tab', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            await manager_1.default.doAction('open');
            let tabnr = await nvim.call('tabpagenr');
            expect(tabnr).toBeGreaterThan(1);
            let win = nvim.createWindow(ui.winid);
            let valid = await win.valid;
            expect(valid).toBe(true);
        });
        it('should invoke reload action', async () => {
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            labels = ['d', 'e'];
            await manager_1.default.doAction('reload');
            await helper_1.default.wait(50);
            let buf = await nvim.buffer;
            let lines = await buf.lines;
            expect(lines).toEqual(['d', 'e']);
        });
    });
    describe('reloadItems()', () => {
        it('should not reload items when window is hidden', async () => {
            let fn = jest.fn();
            let list = {
                name: 'reload',
                defaultAction: 'open',
                actions: [{
                        name: 'open',
                        execute: () => { }
                    }],
                loadItems: () => {
                    fn();
                    return Promise.resolve([]);
                }
            };
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'reload']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            await manager_1.default.cancel(true);
            let ses = manager_1.default.getSession('reload');
            await ses.reloadItems();
            expect(fn).toBeCalledTimes(1);
        });
    });
    describe('resume()', () => {
        it('should do preview on resume', async () => {
            labels = ['a', 'b', 'c'];
            let lastItem;
            let list = new SimpleList();
            list.actions.push({
                name: 'preview',
                execute: item => {
                    lastItem = item;
                }
            });
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', '--auto-preview', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            await ui.selectLines(1, 2);
            await helper_1.default.wait(50);
            await nvim.call('coc#window#close', [ui.winid]);
            await helper_1.default.wait(100);
            await manager_1.default.session.resume();
            await helper_1.default.wait(100);
            expect(lastItem).toBeDefined();
        });
    });
    describe('jumpBack()', () => {
        it('should jump back', async () => {
            let win = await nvim.window;
            labels = ['a', 'b', 'c'];
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            manager_1.default.session.jumpBack();
            await helper_1.default.wait(50);
            let winid = await nvim.call('win_getid');
            expect(winid).toBe(win.id);
        });
    });
    describe('hide()', () => {
        it('should not throw when window undefined', async () => {
            let session = new session_1.default(nvim, new prompt_1.default(nvim), new SimpleList(), {
                reverse: true,
                numberSelect: true,
                autoPreview: true,
                first: false,
                input: 'test',
                interactive: false,
                matcher: 'strict',
                ignorecase: true,
                position: 'top',
                mode: 'normal',
                noQuit: false,
                sort: false
            }, []);
            await expect(async () => {
                await session.call('fn_not_exists');
            }).rejects.toThrow(Error);
            await session.doPreview(0);
            await session.first();
            await session.hide(false, true);
            let worker = session.worker;
            worker._onDidChangeItems.fire({ items: [] });
            worker._onDidChangeLoading.fire(false);
        });
    });
    describe('doNumberSelect()', () => {
        async function create(len) {
            labels = [];
            for (let i = 0; i < len; i++) {
                let code = 'a'.charCodeAt(0) + i;
                labels.push(String.fromCharCode(code));
            }
            let list = new SimpleList();
            disposables.push(manager_1.default.registerList(list));
            await manager_1.default.start(['--normal', '--number-select', 'simple']);
            let ui = manager_1.default.session.ui;
            await ui.ready;
            return manager_1.default.session;
        }
        it('should return false for invalid number', async () => {
            let session = await create(5);
            let res = await session.doNumberSelect('a');
            expect(res).toBe(false);
            res = await session.doNumberSelect('8');
            expect(res).toBe(false);
        });
        it('should consider 0 as 10', async () => {
            let session = await create(15);
            let res = await session.doNumberSelect('0');
            expect(res).toBe(true);
            expect(lastItem).toBe('j');
        });
    });
});
describe('showHelp()', () => {
    it('should show description and options in help', async () => {
        labels = ['a', 'b', 'c'];
        let list = new SimpleList();
        disposables.push(manager_1.default.registerList(list));
        await manager_1.default.start(['--normal', 'simple']);
        let ui = manager_1.default.session.ui;
        await ui.ready;
        await manager_1.default.session.showHelp();
        let lines = await nvim.call('getline', [1, '$']);
        expect(lines.indexOf('DESCRIPTION')).toBeGreaterThan(0);
        expect(lines.indexOf('ARGUMENTS')).toBeGreaterThan(0);
    });
});
describe('chooseAction()', () => {
    it('should filter actions not have shortcuts', async () => {
        labels = ['a', 'b', 'c'];
        let fn = jest.fn();
        let list = new SimpleList();
        list.actions.push({
            name: 'a',
            execute: () => {
                fn();
            }
        });
        list.actions.push({
            name: 'b',
            execute: () => {
            }
        });
        list.actions.push({
            name: 'ab',
            execute: () => {
            }
        });
        disposables.push(manager_1.default.registerList(list));
        await manager_1.default.start(['--normal', 'simple']);
        await manager_1.default.session.ui.ready;
        let p = manager_1.default.session.chooseAction();
        await helper_1.default.wait(50);
        await nvim.input('a');
        await p;
        expect(fn).toBeCalled();
    });
    it('should choose action by menu picker', async () => {
        helper_1.default.updateConfiguration('list.menuAction', true);
        labels = ['a', 'b', 'c'];
        let fn = jest.fn();
        let list = new SimpleList();
        let len = list.actions.length;
        list.actions.splice(0, len);
        list.actions.push({
            name: 'a',
            execute: () => {
                fn();
            }
        });
        list.actions.push({
            name: 'b',
            execute: () => {
                fn();
            }
        });
        disposables.push(manager_1.default.registerList(list));
        await manager_1.default.start(['--normal', 'simple']);
        await manager_1.default.session.ui.ready;
        let p = manager_1.default.session.chooseAction();
        await helper_1.default.waitPrompt();
        await nvim.input('<cr>');
        await p;
    });
});
//# sourceMappingURL=session.test.js.map