'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const languages_1 = tslib_1.__importDefault(require("../../languages"));
const workspace_1 = tslib_1.__importDefault(require("../../workspace"));
const basic_1 = tslib_1.__importDefault(require("../basic"));
const formatting_1 = require("../formatting");
class LinksList extends basic_1.default {
    constructor() {
        super();
        this.defaultAction = 'open';
        this.description = 'links of current buffer';
        this.name = 'links';
        this.addAction('open', async (item) => {
            let { target } = item.data;
            await workspace_1.default.openResource(target);
        });
        this.addAction('jump', async (item) => {
            let { location } = item.data;
            await workspace_1.default.jumpTo(location.uri, location.range.start);
        });
    }
    async loadItems(context, token) {
        let buf = await context.window.buffer;
        let doc = workspace_1.default.getAttachedDocument(buf.id);
        let items = [];
        let links = await languages_1.default.getDocumentLinks(doc.textDocument, token);
        if (links == null)
            throw new Error('Links provider not found.');
        let res = [];
        for (let link of links) {
            link = link.target ? link : await languages_1.default.resolveDocumentLink(link, token);
            if (link.target) {
                items.push({
                    label: (0, formatting_1.formatUri)(link.target, workspace_1.default.cwd),
                    data: {
                        target: link.target,
                        location: vscode_languageserver_types_1.Location.create(doc.uri, link.range)
                    }
                });
            }
            res.push(link);
        }
        return items;
    }
}
exports.default = LinksList;
//# sourceMappingURL=links.js.map