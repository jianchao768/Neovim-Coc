"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const languages_1 = tslib_1.__importStar(require("../../languages"));
const util_1 = require("../../util");
const workspace_1 = tslib_1.__importDefault(require("../../workspace"));
const helper_1 = tslib_1.__importDefault(require("../helper"));
let nvim;
let disposables = [];
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
    // hover = helper.plugin.getHandler().hover
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
beforeEach(async () => {
    await helper_1.default.createDocument();
});
afterEach(async () => {
    (0, util_1.disposeAll)(disposables);
    await helper_1.default.reset();
});
describe('InlineValue', () => {
    describe('InlineValueManager', () => {
        it('should return false when provider not exists', async () => {
            let doc = await workspace_1.default.document;
            let res = languages_1.default.hasProvider(languages_1.ProviderName.InlineValue, doc.textDocument);
            expect(res).toBe(false);
        });
        it('should return merged results', async () => {
            disposables.push(languages_1.default.registerInlineValuesProvider([{ language: '*' }], {
                provideInlineValues: () => {
                    return null;
                }
            }));
            disposables.push(languages_1.default.registerInlineValuesProvider([{ language: '*' }], {
                provideInlineValues: () => {
                    return [
                        vscode_languageserver_protocol_1.InlineValueText.create(vscode_languageserver_protocol_1.Range.create(0, 0, 0, 1), 'foo'),
                        vscode_languageserver_protocol_1.InlineValueText.create(vscode_languageserver_protocol_1.Range.create(0, 3, 0, 5), 'bar'),
                    ];
                }
            }));
            disposables.push(languages_1.default.registerInlineValuesProvider([{ language: '*' }], {
                provideInlineValues: () => {
                    return [
                        vscode_languageserver_protocol_1.InlineValueText.create(vscode_languageserver_protocol_1.Range.create(0, 0, 0, 1), 'foo'),
                    ];
                }
            }));
            let doc = await workspace_1.default.document;
            let res = await languages_1.default.provideInlineValues(doc.textDocument, vscode_languageserver_protocol_1.Range.create(0, 0, 3, 0), { frameId: 3, stoppedLocation: vscode_languageserver_protocol_1.Range.create(0, 0, 0, 3) }, vscode_languageserver_protocol_1.CancellationToken.None);
            expect(res.length).toBe(2);
        });
    });
});
//# sourceMappingURL=inlineValue.test.js.map