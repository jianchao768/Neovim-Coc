"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addChildren = void 0;
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const vscode_uri_1 = require("vscode-uri");
const commands_1 = tslib_1.__importDefault(require("../commands"));
const node_1 = require("../util/node");
const protocol_1 = require("../util/protocol");
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const TreeItem_1 = require("./TreeItem");
class LocationsDataProvider {
    constructor(meta, winid, config, commandId, rootItems, getIcon, resolveChildren) {
        this.meta = meta;
        this.winid = winid;
        this.config = config;
        this.commandId = commandId;
        this.rootItems = rootItems;
        this.getIcon = getIcon;
        this.resolveChildren = resolveChildren;
        this._onDidChangeTreeData = new protocol_1.Emitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
        this.actions = [];
        this.addAction('Open in new tab', async (element) => {
            await commands_1.default.executeCommand(this.commandId, winid, element, 'tabe');
        });
        this.addAction('Dismiss', async (element) => {
            if (element.parent == null) {
                let els = this.rootItems.filter(o => o !== element);
                this.reset(els);
            }
            else {
                let parentElement = element.parent;
                let idx = parentElement.children.findIndex(o => o === element);
                parentElement.children.splice(idx, 1);
                this._onDidChangeTreeData.fire(parentElement);
            }
        });
    }
    cancel() {
        if (this.tokenSource) {
            this.tokenSource.cancel();
            this.tokenSource = undefined;
        }
    }
    reset(rootItems) {
        this.rootItems = rootItems;
        this._onDidChangeTreeData.fire(undefined);
    }
    addAction(title, handler) {
        this.actions.push({ title, handler });
    }
    async getChildren(element) {
        this.cancel();
        this.tokenSource = new protocol_1.CancellationTokenSource();
        let { token } = this.tokenSource;
        if (!element) {
            for (let o of this.rootItems) {
                let children = await this.resolveChildren(o, this.meta, token);
                addChildren(o, children, token);
            }
            return this.rootItems;
        }
        if (element.children)
            return element.children;
        let items = await this.resolveChildren(element, this.meta, token);
        this.tokenSource = undefined;
        addChildren(element, items, token);
        return items;
    }
    getTreeItem(element) {
        var _a;
        let item = new TreeItem_1.TreeItem(element.name, element.children ? TreeItem_1.TreeItemCollapsibleState.Expanded : TreeItem_1.TreeItemCollapsibleState.Collapsed);
        if (this.config.enableTooltip) {
            item.tooltip = node_1.path.relative(workspace_1.default.cwd, vscode_uri_1.URI.parse(element.uri).fsPath);
        }
        item.description = element.detail;
        item.deprecated = (_a = element.tags) === null || _a === void 0 ? void 0 : _a.includes(vscode_languageserver_types_1.SymbolTag.Deprecated);
        item.icon = this.getIcon(element.kind);
        item.command = {
            command: this.commandId,
            title: 'open location',
            arguments: [this.winid, element, this.config.openCommand]
        };
        return item;
    }
    resolveActions() {
        return this.actions;
    }
    dispose() {
        this.cancel();
        let win = workspace_1.default.nvim.createWindow(this.winid);
        win.clearMatchGroup(LocationsDataProvider.rangesHighlight);
    }
}
exports.default = LocationsDataProvider;
LocationsDataProvider.rangesHighlight = 'CocSelectedRange';
function addChildren(el, children, token) {
    if (!Array.isArray(children) || (token && token.isCancellationRequested))
        return;
    children.forEach(item => item.parent = el);
    el.children = children;
}
exports.addChildren = addChildren;
//# sourceMappingURL=LocationsDataProvider.js.map