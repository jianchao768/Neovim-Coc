'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const array_1 = require("../util/array");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class SignatureManager extends manager_1.default {
    register(selector, provider, triggerCharacters) {
        triggerCharacters = (0, array_1.isFalsyOrEmpty)(triggerCharacters) ? [] : triggerCharacters;
        let characters = triggerCharacters.reduce((p, c) => p.concat(c.length == 1 ? [c] : c.split(/\s*/g)), []);
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider,
            triggerCharacters: characters
        });
    }
    shouldTrigger(document, triggerCharacter) {
        let items = this.getProviders(document);
        if (items.length === 0)
            return false;
        for (let item of items) {
            if (item.triggerCharacters.includes(triggerCharacter)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Multiple providers can be registered for a language. In that case providers are sorted
     * by their {@link languages.match score} and called sequentially until a provider returns a
     * valid result.
     */
    async provideSignatureHelp(document, position, token, context) {
        let items = this.getProviders(document);
        for (const item of items) {
            let res = await Promise.resolve(item.provider.provideSignatureHelp(document, position, token, context));
            if (res && res.signatures && res.signatures.length > 0)
                return res;
        }
        return null;
    }
}
exports.default = SignatureManager;
//# sourceMappingURL=signatureManager.js.map