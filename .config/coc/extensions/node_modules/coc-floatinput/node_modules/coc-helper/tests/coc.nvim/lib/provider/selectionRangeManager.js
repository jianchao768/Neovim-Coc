'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const object_1 = require("../util/object");
const position_1 = require("../util/position");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class SelectionRangeManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    /**
     * Multiple providers can be registered for a language. In that case providers are asked in
     * parallel and the results are merged. A failing provider (rejected promise or exception) will
     * not cause a failure of the whole operation.
     */
    async provideSelectionRanges(document, positions, token) {
        let items = this.getProviders(document);
        if (items.length === 0)
            return null;
        let selectionRangeResult = [];
        let results = await Promise.allSettled(items.map(item => {
            return Promise.resolve(item.provider.provideSelectionRanges(document, positions, token)).then(ranges => {
                if (Array.isArray(ranges) && ranges.length > 0) {
                    selectionRangeResult.push(ranges);
                }
            });
        }));
        this.handleResults(results, 'provideSelectionRanges');
        if (selectionRangeResult.length === 0)
            return null;
        let selectionRanges = selectionRangeResult[0];
        // concat ranges when possible
        if (selectionRangeResult.length > 1) {
            for (let i = 1; i <= selectionRangeResult.length - 1; i++) {
                let start = selectionRanges[0].range;
                let end = selectionRanges[selectionRanges.length - 1].range;
                let ranges = selectionRangeResult[i];
                let len = ranges.length;
                if ((0, position_1.rangeInRange)(end, ranges[0].range) && !(0, object_1.equals)(end, ranges[0].range)) {
                    selectionRanges.push(...ranges);
                }
                else if ((0, position_1.rangeInRange)(ranges[len - 1].range, start) && !(0, object_1.equals)(ranges[len - 1].range, start)) {
                    selectionRanges.unshift(...ranges);
                }
            }
        }
        for (let i = 0; i < selectionRanges.length - 1; i++) {
            let r = selectionRanges[i];
            r.parent = selectionRanges[i + 1];
        }
        return selectionRanges;
    }
}
exports.default = SelectionRangeManager;
//# sourceMappingURL=selectionRangeManager.js.map