'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const object_1 = require("../util/object");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class InlineValueManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    /**
     * Multiple providers can be registered for a language. In that case providers are asked in
     * parallel and the results are merged. A failing provider (rejected promise or exception) will
     * not cause a failure of the whole operation.
     */
    async provideInlineValues(document, viewPort, context, token) {
        const items = this.getProviders(document);
        const values = [];
        const results = await Promise.allSettled(items.map(item => {
            return Promise.resolve(item.provider.provideInlineValues(document, viewPort, context, token)).then(arr => {
                if (!Array.isArray(arr))
                    return;
                let noCheck = values.length === 0;
                for (let value of arr) {
                    if (noCheck || values.every(o => !(0, object_1.equals)(o, value))) {
                        values.push(value);
                    }
                }
            });
        }));
        this.handleResults(results, 'provideInlineValues');
        return values;
    }
}
exports.default = InlineValueManager;
//# sourceMappingURL=inlineValueManager.js.map