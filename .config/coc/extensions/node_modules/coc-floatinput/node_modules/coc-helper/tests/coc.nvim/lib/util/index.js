'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.disposeAll = exports.concurrent = exports.delay = exports.waitImmediate = exports.waitNextTick = exports.waitWithToken = exports.wait = exports.defaultValue = exports.pariedCharacters = exports.getConditionValue = void 0;
function getConditionValue(value, testValue) {
    return global.__TEST__ ? testValue : value;
}
exports.getConditionValue = getConditionValue;
exports.pariedCharacters = new Map([
    ['<', '>'],
    ['>', '<'],
    ['{', '}'],
    ['[', ']'],
    ['(', ')'],
]);
function defaultValue(val, defaultValue) {
    return val == null ? defaultValue : val;
}
exports.defaultValue = defaultValue;
function wait(ms) {
    if (ms <= 0)
        return Promise.resolve(undefined);
    return new Promise(resolve => {
        let timer = setTimeout(() => {
            resolve(undefined);
        }, ms);
        timer.unref();
    });
}
exports.wait = wait;
function waitWithToken(ms, token) {
    return new Promise(resolve => {
        let disposable = token.onCancellationRequested(() => {
            clearTimeout(timer);
            resolve(true);
        });
        let timer = setTimeout(() => {
            disposable.dispose();
            resolve(false);
        }, ms);
        timer.unref();
    });
}
exports.waitWithToken = waitWithToken;
function waitNextTick() {
    return new Promise(resolve => {
        process.nextTick(() => {
            resolve(undefined);
        });
    });
}
exports.waitNextTick = waitNextTick;
function waitImmediate() {
    return new Promise(resolve => {
        setImmediate(() => {
            resolve(undefined);
        });
    });
}
exports.waitImmediate = waitImmediate;
function delay(func, defaultDelay) {
    let timer;
    let fn = (ms) => {
        if (timer)
            clearTimeout(timer);
        timer = setTimeout(() => {
            func();
        }, ms !== null && ms !== void 0 ? ms : defaultDelay);
        timer.unref();
    };
    Object.defineProperty(fn, 'clear', {
        get: () => {
            return () => {
                clearTimeout(timer);
            };
        }
    });
    return fn;
}
exports.delay = delay;
function concurrent(arr, fn, limit = 3) {
    if (arr.length == 0)
        return Promise.resolve();
    let finished = 0;
    let total = arr.length;
    let remain = arr.slice();
    return new Promise(resolve => {
        let run = (val) => {
            let cb = () => {
                finished = finished + 1;
                if (finished == total) {
                    resolve();
                }
                else if (remain.length) {
                    let next = remain.shift();
                    run(next);
                }
            };
            fn(val).then(cb, cb);
        };
        for (let i = 0; i < Math.min(limit, remain.length); i++) {
            let val = remain.shift();
            run(val);
        }
    });
}
exports.concurrent = concurrent;
function disposeAll(disposables) {
    while (disposables.length) {
        const item = disposables.pop();
        item === null || item === void 0 ? void 0 : item.dispose();
    }
}
exports.disposeAll = disposeAll;
//# sourceMappingURL=index.js.map