'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const events_1 = require("events");
const logger_1 = require("../logger");
const util_1 = require("../util");
const node_1 = require("../util/node");
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const spawn = node_1.child_process.spawn;
const logger = (0, logger_1.createLogger)('list-commandTask');
class CommandTask extends events_1.EventEmitter {
    constructor(opt) {
        super();
        this.opt = opt;
        this.disposables = [];
        this.start();
    }
    start() {
        let { cmd, args, cwd, onLine } = this.opt;
        let proc = spawn(cmd, args, { cwd: cwd || workspace_1.default.cwd, windowsHide: true });
        this.disposables.push({
            dispose: () => {
                proc.kill();
            }
        });
        proc.on('error', e => {
            this.emit('error', e.message);
        });
        proc.stderr.on('data', chunk => {
            logger.error(`[${cmd} Error]`, chunk.toString('utf8'));
        });
        const rl = node_1.readline.createInterface(proc.stdout);
        rl.on('line', line => {
            let res = onLine(line);
            if (res)
                this.emit('data', res);
        });
        rl.on('close', () => {
            this.emit('end');
        });
    }
    dispose() {
        (0, util_1.disposeAll)(this.disposables);
    }
}
exports.default = CommandTask;
//# sourceMappingURL=commandTask.js.map