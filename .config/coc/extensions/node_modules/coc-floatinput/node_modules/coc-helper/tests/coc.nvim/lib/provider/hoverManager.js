'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const object_1 = require("../util/object");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class HoverManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    async provideHover(document, position, token) {
        let items = this.getProviders(document);
        let hovers = [];
        let results = await Promise.allSettled(items.map(item => {
            return Promise.resolve(item.provider.provideHover(document, position, token)).then(hover => {
                if (!vscode_languageserver_types_1.Hover.is(hover))
                    return;
                if (hovers.findIndex(o => (0, object_1.equals)(o.contents, hover.contents)) == -1) {
                    hovers.push(hover);
                }
            });
        }));
        this.handleResults(results, 'provideHover');
        return hovers;
    }
}
exports.default = HoverManager;
//# sourceMappingURL=hoverManager.js.map