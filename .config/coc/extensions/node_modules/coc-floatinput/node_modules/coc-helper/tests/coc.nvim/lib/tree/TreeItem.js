'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItemLabel = exports.TreeItem = exports.TreeItemCollapsibleState = exports.TreeItemLabel = void 0;
const vscode_uri_1 = require("vscode-uri");
const node_1 = require("../util/node");
// eslint-disable-next-line no-redeclare
var TreeItemLabel;
(function (TreeItemLabel) {
    function is(obj) {
        return typeof obj.label == 'string';
    }
    TreeItemLabel.is = is;
})(TreeItemLabel = exports.TreeItemLabel || (exports.TreeItemLabel = {}));
/**
 * Collapsible state of the tree item
 */
var TreeItemCollapsibleState;
(function (TreeItemCollapsibleState) {
    /**
     * Determines an item can be neither collapsed nor expanded. Implies it has no children.
     */
    TreeItemCollapsibleState[TreeItemCollapsibleState["None"] = 0] = "None";
    /**
     * Determines an item is collapsed
     */
    TreeItemCollapsibleState[TreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
    /**
     * Determines an item is expanded
     */
    TreeItemCollapsibleState[TreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
})(TreeItemCollapsibleState = exports.TreeItemCollapsibleState || (exports.TreeItemCollapsibleState = {}));
class TreeItem {
    constructor(label, collapsibleState = TreeItemCollapsibleState.None) {
        this.collapsibleState = collapsibleState;
        if (vscode_uri_1.URI.isUri(label)) {
            this.resourceUri = label;
            this.label = node_1.path.basename(label.path);
            this.id = label.toString();
        }
        else {
            this.label = label;
        }
    }
}
exports.TreeItem = TreeItem;
function getItemLabel(item) {
    return TreeItemLabel.is(item.label) ? item.label.label : item.label;
}
exports.getItemLabel = getItemLabel;
//# sourceMappingURL=TreeItem.js.map