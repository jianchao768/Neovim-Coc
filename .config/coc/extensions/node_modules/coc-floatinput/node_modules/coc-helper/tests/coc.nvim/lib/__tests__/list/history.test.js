"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const history_1 = tslib_1.__importDefault(require("../../list/history"));
const db_1 = require("../../list/db");
const os_1 = tslib_1.__importDefault(require("os"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const uuid_1 = require("uuid");
function createTmpDir() {
    let dir = path_1.default.join(os_1.default.tmpdir(), (0, uuid_1.v4)());
    fs_1.default.mkdirSync(dir, { recursive: true });
    return dir;
}
afterEach(() => {
    let DB_PATH = path_1.default.join(process.env.COC_DATA_HOME, 'list_history.dat');
    if (fs_1.default.existsSync(DB_PATH)) {
        fs_1.default.unlinkSync(DB_PATH);
    }
});
describe('History', () => {
    it('should migrate history.json', async () => {
        let dir = createTmpDir();
        history_1.default.migrate(dir);
        history_1.default.migrate(path_1.default.join(os_1.default.tmpdir(), 'not_exists'));
        dir = createTmpDir();
        let file = path_1.default.join(dir, 'list-a-history.json');
        fs_1.default.writeFileSync(file, '{"x": 1}');
        history_1.default.migrate(dir);
        dir = createTmpDir();
        file = path_1.default.join(dir, 'list-mrn-history.json');
        let obj = {
            'L1VzZXJzL2NoZW16cW0vdmltLWRldi9jb2MubnZpbQ==': ['list']
        };
        fs_1.default.writeFileSync(file, JSON.stringify(obj, null, 2));
        history_1.default.migrate(dir);
    });
    it('should filter history', async () => {
        let db = new db_1.DataBase();
        db.save();
        db.addItem('name', 'text', '/a/b');
        let p = { input: '' };
        let history = new history_1.default(p, 'name', db, '/a/b');
        history.filter();
        expect(history.filtered).toEqual(['text']);
        p.input = 't';
        history.filter();
        expect(history.filtered).toEqual(['text']);
        history.previous();
        history.filter();
        expect(history.filtered).toEqual(['text']);
    });
    it('should add item', async () => {
        let db = new db_1.DataBase();
        let p = { input: '' };
        let history = new history_1.default(p, 'name', db, '/a/b');
        history.add();
        p.input = 'input';
        history.add();
        p.input = '';
        history.filter();
        expect(history.filtered).toEqual(['input']);
    });
    it('should change to previous', async () => {
        let db = new db_1.DataBase();
        let p = { input: '' };
        let history = new history_1.default(p, 'name', db, '/a/b');
        history.previous();
        db.addItem('name', 'one', '/a/b');
        db.addItem('name', 'two', '/a/b');
        db.addItem('name', 'three', '/a/b/c');
        history.filter();
        history.previous();
        history.previous();
        expect(history.index).toBe(0);
        expect(history.curr).toBe('one');
    });
    it('should change to next', async () => {
        let db = new db_1.DataBase();
        let p = { input: '' };
        let history = new history_1.default(p, 'name', db, '/a/b');
        history.next();
        db.addItem('name', 'one', '/a/b');
        db.addItem('name', 'two', '/a/b');
        db.addItem('name', 'three', '/a/b/c');
        history.filter();
        history.next();
        history.next();
        history.next();
        expect(history.index).toBe(0);
        expect(history.curr).toBe('one');
    });
});
describe('DataBase', () => {
    it('should not throw on load', async () => {
        let spy = jest.spyOn(db_1.DataBase.prototype, 'load').mockImplementation(() => {
            throw new Error('error');
        });
        new db_1.DataBase();
        spy.mockRestore();
    });
    it('should add items', async () => {
        let db = new db_1.DataBase();
        db.addItem('name', 'x'.repeat(260), '/a/b/c');
        let item = db.currItems[0];
        expect(item[0].length).toBe(255);
        db.addItem('name', 'xy', '/a/b/c');
        db.addItem('name', 'xy', '/a/b/c');
        expect(db.currItems.length).toBe(2);
    });
    it('should save data', async () => {
        let db = new db_1.DataBase();
        db.addItem('name', 'text', '/a/b/c');
        db.addItem('other_name', 'te', '/a/b/x/y');
        db.save();
        let d = new db_1.DataBase();
        expect(d.currItems.length).toBe(2);
    });
});
//# sourceMappingURL=history.test.js.map