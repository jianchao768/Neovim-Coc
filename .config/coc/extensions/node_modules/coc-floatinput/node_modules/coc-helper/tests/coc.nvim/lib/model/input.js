'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const protocol_1 = require("../util/protocol");
const events_1 = tslib_1.__importDefault(require("../events"));
const util_1 = require("../util");
const object_1 = require("../util/object");
const string_1 = require("../util/string");
class InputBox {
    constructor(nvim, defaultValue) {
        this.nvim = nvim;
        this.disposables = [];
        this.accepted = false;
        this._disposed = false;
        // width, height, row, col
        this._dimension = [0, 0, 0, 0];
        this._onDidFinish = new protocol_1.Emitter();
        this._onDidChange = new protocol_1.Emitter();
        this.clear = false;
        this.onDidFinish = this._onDidFinish.event;
        this.onDidChange = this._onDidChange.event;
        this._input = defaultValue;
        this.disposables.push(this._onDidFinish);
        this.disposables.push(this._onDidChange);
        let _title;
        Object.defineProperty(this, 'title', {
            set: (newTitle) => {
                _title = newTitle;
                if (this._winid)
                    nvim.call('coc#dialog#change_title', [this._winid, newTitle], true);
            },
            get: () => {
                return _title;
            }
        });
        let _loading = false;
        Object.defineProperty(this, 'loading', {
            set: (loading) => {
                _loading = loading;
                if (this._winid)
                    nvim.call('coc#dialog#change_loading', [this._winid, loading], true);
            },
            get: () => {
                return _loading;
            }
        });
        let _borderhighlight;
        Object.defineProperty(this, 'borderhighlight', {
            set: (borderhighlight) => {
                _borderhighlight = borderhighlight;
                if (this._winid)
                    nvim.call('coc#dialog#change_border_hl', [this._winid, borderhighlight], true);
            },
            get: () => {
                return _borderhighlight;
            }
        });
        Object.defineProperty(this, 'value', {
            set: (value) => {
                value = (0, string_1.toText)(value);
                if (value !== this._input) {
                    this.clearVirtualText();
                    this._input = value;
                    this.nvim.call('coc#dialog#change_input_value', [this.winid, this.bufnr, value], true);
                    this._onDidChange.fire(value);
                }
            },
            get: () => {
                return this._input;
            }
        });
        events_1.default.on('BufWinLeave', bufnr => {
            if (bufnr == this._bufnr) {
                this._winid = undefined;
                this.dispose();
            }
        }, null, this.disposables);
        events_1.default.on('PromptInsert', (value, bufnr) => {
            if (bufnr == this._bufnr) {
                this._input = value;
                this.accepted = true;
                this.dispose();
            }
        }, null, this.disposables);
        events_1.default.on('TextChangedI', (bufnr, info) => {
            if (bufnr == this._bufnr && this._input !== info.line) {
                this.clearVirtualText();
                this._input = info.line;
                this._onDidChange.fire(info.line);
            }
        }, null, this.disposables);
    }
    clearVirtualText() {
        if (this.clear && this.bufnr) {
            this.clear = false;
            let buf = this.nvim.createBuffer(this.bufnr);
            buf.clearNamespace('input-box');
        }
    }
    get dimension() {
        let { _dimension } = this;
        return { width: _dimension[0], height: _dimension[1], row: _dimension[2], col: _dimension[3] };
    }
    get bufnr() {
        return this._bufnr;
    }
    get winid() {
        return this._winid;
    }
    async show(title, preferences) {
        var _a;
        this.title = title;
        this.borderhighlight = (_a = preferences.borderhighlight) !== null && _a !== void 0 ? _a : 'CocFloating';
        this.loading = false;
        if (preferences.placeHolder && !this._input && !this.nvim.isVim) {
            this.clear = true;
        }
        let config = (0, object_1.omitUndefined)(preferences);
        let res = await this.nvim.call('coc#dialog#create_prompt_win', [title, this._input, config]);
        if (!res)
            throw new Error('Unable to open input window');
        this._bufnr = res[0];
        this._winid = res[1];
        this._dimension = res[2];
        return true;
    }
    dispose() {
        var _a;
        if (this._disposed)
            return;
        this._disposed = true;
        this.nvim.call('coc#float#close', [(_a = this._winid) !== null && _a !== void 0 ? _a : -1], true);
        this._onDidFinish.fire(this.accepted ? this._input : null);
        this._winid = undefined;
        this._bufnr = undefined;
        (0, util_1.disposeAll)(this.disposables);
    }
}
exports.default = InputBox;
//# sourceMappingURL=input.js.map