'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.badScheme = exports.shouldNotAsync = exports.fileNotExists = exports.fileExists = exports.directoryNotExists = exports.illegalArgument = exports.notLoaded = exports.onUnexpectedError = exports.isCancellationError = exports.assert = exports.CancellationError = void 0;
const canceledName = 'Canceled';
// !!!IMPORTANT!!!
// Do NOT change this class because it is also used as an API-type.
class CancellationError extends Error {
    constructor() {
        super(canceledName);
        this.name = this.message;
    }
}
exports.CancellationError = CancellationError;
function assert(condition) {
    if (!condition) {
        throw new BugIndicatingError('Assertion Failed');
    }
}
exports.assert = assert;
/**
 * This error indicates a bug.
 * Do not throw this for invalid user input.
 * Only catch this error to recover gracefully from bugs.
 */
class BugIndicatingError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, BugIndicatingError.prototype);
        // Because we know for sure only buggy code throws this,
        // we definitely want to break here and fix the bug.
        // eslint-disable-next-line no-debugger
        debugger;
    }
}
/**
 * Checks if the given error is a promise in canceled state
 */
function isCancellationError(error) {
    if (error instanceof CancellationError) {
        return true;
    }
    return error instanceof Error && error.name === canceledName && error.message === canceledName;
}
exports.isCancellationError = isCancellationError;
function onUnexpectedError(e) {
    // ignore errors from cancelled promises
    if (isCancellationError(e))
        return;
    if (e.stack) {
        throw new Error(e.message + '\n\n' + e.stack);
    }
    throw e;
}
exports.onUnexpectedError = onUnexpectedError;
function notLoaded(uri) {
    return new Error(`File ${uri} not loaded`);
}
exports.notLoaded = notLoaded;
function illegalArgument(name) {
    if (name) {
        return new Error(`Illegal argument: ${name}`);
    }
    else {
        return new Error('Illegal argument');
    }
}
exports.illegalArgument = illegalArgument;
function directoryNotExists(dir) {
    return new Error(`Directory ${dir} not exists`);
}
exports.directoryNotExists = directoryNotExists;
function fileExists(filepath) {
    return new Error(`File ${filepath} already exists`);
}
exports.fileExists = fileExists;
function fileNotExists(filepath) {
    return new Error(`File ${filepath} not exists`);
}
exports.fileNotExists = fileNotExists;
function shouldNotAsync(method) {
    return new Error(`${method} should not be called in an asynchronize manner`);
}
exports.shouldNotAsync = shouldNotAsync;
function badScheme(uri) {
    return new Error(`Change of ${uri} not supported`);
}
exports.badScheme = badScheme;
//# sourceMappingURL=errors.js.map