'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentSymbolFeature = exports.SupportedSymbolTags = exports.SupportedSymbolKinds = void 0;
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const languages_1 = tslib_1.__importDefault(require("../languages"));
const protocol_1 = require("../util/protocol");
const features_1 = require("./features");
const cv = tslib_1.__importStar(require("./utils/converter"));
const UUID = tslib_1.__importStar(require("./utils/uuid"));
exports.SupportedSymbolKinds = [
    vscode_languageserver_types_1.SymbolKind.File,
    vscode_languageserver_types_1.SymbolKind.Module,
    vscode_languageserver_types_1.SymbolKind.Namespace,
    vscode_languageserver_types_1.SymbolKind.Package,
    vscode_languageserver_types_1.SymbolKind.Class,
    vscode_languageserver_types_1.SymbolKind.Method,
    vscode_languageserver_types_1.SymbolKind.Property,
    vscode_languageserver_types_1.SymbolKind.Field,
    vscode_languageserver_types_1.SymbolKind.Constructor,
    vscode_languageserver_types_1.SymbolKind.Enum,
    vscode_languageserver_types_1.SymbolKind.Interface,
    vscode_languageserver_types_1.SymbolKind.Function,
    vscode_languageserver_types_1.SymbolKind.Variable,
    vscode_languageserver_types_1.SymbolKind.Constant,
    vscode_languageserver_types_1.SymbolKind.String,
    vscode_languageserver_types_1.SymbolKind.Number,
    vscode_languageserver_types_1.SymbolKind.Boolean,
    vscode_languageserver_types_1.SymbolKind.Array,
    vscode_languageserver_types_1.SymbolKind.Object,
    vscode_languageserver_types_1.SymbolKind.Key,
    vscode_languageserver_types_1.SymbolKind.Null,
    vscode_languageserver_types_1.SymbolKind.EnumMember,
    vscode_languageserver_types_1.SymbolKind.Struct,
    vscode_languageserver_types_1.SymbolKind.Event,
    vscode_languageserver_types_1.SymbolKind.Operator,
    vscode_languageserver_types_1.SymbolKind.TypeParameter
];
exports.SupportedSymbolTags = [
    vscode_languageserver_types_1.SymbolTag.Deprecated
];
class DocumentSymbolFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, protocol_1.DocumentSymbolRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let symbolCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentSymbol');
        symbolCapabilities.dynamicRegistration = true;
        symbolCapabilities.symbolKind = {
            valueSet: exports.SupportedSymbolKinds
        };
        symbolCapabilities.hierarchicalDocumentSymbolSupport = true;
        symbolCapabilities.tagSupport = {
            valueSet: exports.SupportedSymbolTags
        };
        symbolCapabilities.labelSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentSymbolProvider);
        if (!options) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: options
        });
    }
    registerLanguageProvider(options) {
        const provider = {
            meta: options.label ? { label: options.label } : undefined,
            provideDocumentSymbols: (document, token) => {
                const client = this._client;
                const _provideDocumentSymbols = (document, token) => {
                    return this.sendRequest(protocol_1.DocumentSymbolRequest.type, cv.asDocumentSymbolParams(document), token);
                };
                const middleware = client.middleware;
                return middleware.provideDocumentSymbols
                    ? middleware.provideDocumentSymbols(document, token, _provideDocumentSymbols)
                    : _provideDocumentSymbols(document, token);
            }
        };
        return [languages_1.default.registerDocumentSymbolProvider(options.documentSelector, provider), provider];
    }
}
exports.DocumentSymbolFeature = DocumentSymbolFeature;
//# sourceMappingURL=documentSymbol.js.map