'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDocumentSymbols = exports.addDocumentSymbol = exports.convertSymbols = void 0;
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const convert_1 = require("../../util/convert");
const position_1 = require("../../util/position");
function convertSymbols(symbols) {
    let res = [];
    let arr = symbols.slice();
    arr.sort(sortDocumentSymbols);
    arr.forEach(s => addDocumentSymbol(res, s, 0));
    return res;
}
exports.convertSymbols = convertSymbols;
function sortDocumentSymbols(a, b) {
    let ra = a.selectionRange;
    let rb = b.selectionRange;
    return (0, position_1.comparePosition)(ra.start, rb.start);
}
function addDocumentSymbol(res, sym, level) {
    let { name, selectionRange, detail, kind, children, range, tags } = sym;
    let { start } = selectionRange || range;
    let obj = {
        col: start.character + 1,
        lnum: start.line + 1,
        text: name,
        level,
        kind: (0, convert_1.getSymbolKind)(kind),
        range,
        selectionRange
    };
    if (detail)
        obj.detail = detail;
    if (tags && tags.includes(vscode_languageserver_types_1.SymbolTag.Deprecated))
        obj.deprecated = true;
    res.push(obj);
    if (children && children.length) {
        children.sort(sortDocumentSymbols);
        for (let sym of children) {
            addDocumentSymbol(res, sym, level + 1);
        }
    }
}
exports.addDocumentSymbol = addDocumentSymbol;
function isDocumentSymbol(a) {
    return a && vscode_languageserver_types_1.DocumentSymbol.is(a);
}
function isDocumentSymbols(a) {
    return isDocumentSymbol(a[0]);
}
exports.isDocumentSymbols = isDocumentSymbols;
//# sourceMappingURL=util.js.map