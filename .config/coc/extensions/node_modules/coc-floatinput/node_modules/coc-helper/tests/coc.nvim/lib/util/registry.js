"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertProperties = exports.Registry = void 0;
const errors_1 = require("./errors");
const is_1 = require("./is");
const object_1 = require("./object");
class RegistryImpl {
    constructor() {
        this.data = new Map();
    }
    add(id, data) {
        (0, errors_1.assert)(typeof id === 'string');
        (0, errors_1.assert)((0, is_1.objectLiteral)(data));
        (0, errors_1.assert)(!this.data.has(id));
        this.data.set(id, data);
    }
    knows(id) {
        return this.data.has(id);
    }
    as(id) {
        return this.data.get(id) || null;
    }
}
exports.Registry = new RegistryImpl();
const sourcePrefixes = ['coc.source.', 'list.source.'];
var ScopeNames;
(function (ScopeNames) {
    ScopeNames["Application"] = "application";
    ScopeNames["Window"] = "window";
    ScopeNames["Resource"] = "resource";
    ScopeNames["MachineOverridable"] = "machine-overridable";
    ScopeNames["LanguageOverridable"] = "language-overridable";
})(ScopeNames || (ScopeNames = {}));
function convertScope(key, scope, defaultScope) {
    if (sourcePrefixes.some(p => key.startsWith(p)))
        return 1 /* ConfigurationScope.APPLICATION */;
    if (scope === ScopeNames.Application)
        return 1 /* ConfigurationScope.APPLICATION */;
    if (scope === ScopeNames.Window)
        return 2 /* ConfigurationScope.WINDOW */;
    if (scope === ScopeNames.Resource || scope === ScopeNames.MachineOverridable)
        return 3 /* ConfigurationScope.RESOURCE */;
    if (scope === ScopeNames.LanguageOverridable)
        return 4 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */;
    return defaultScope;
}
/**
 * Properties to schema
 */
function convertProperties(properties, defaultScope = 2 /* ConfigurationScope.WINDOW */) {
    let obj = {};
    for (let [key, def] of Object.entries((0, object_1.toObject)(properties))) {
        let data = (0, object_1.deepClone)(def);
        data.scope = convertScope(key, def.scope, defaultScope);
        obj[key] = data;
    }
    return obj;
}
exports.convertProperties = convertProperties;
//# sourceMappingURL=registry.js.map