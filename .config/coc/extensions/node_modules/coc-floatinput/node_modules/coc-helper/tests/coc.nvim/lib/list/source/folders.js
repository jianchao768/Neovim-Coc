'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_uri_1 = require("vscode-uri");
const fs_1 = require("../../util/fs");
const window_1 = tslib_1.__importDefault(require("../../window"));
const workspace_1 = tslib_1.__importDefault(require("../../workspace"));
const basic_1 = tslib_1.__importDefault(require("../basic"));
class FoldList extends basic_1.default {
    constructor() {
        super();
        this.defaultAction = 'edit';
        this.description = 'list of current workspace folders';
        this.name = 'folders';
        this.addAction('edit', async (item) => {
            let newPath = await this.nvim.call('input', ['Folder: ', item.label, 'dir']);
            if (!(0, fs_1.isDirectory)(newPath)) {
                void window_1.default.showWarningMessage(`invalid path: ${newPath}`);
                return;
            }
            workspace_1.default.workspaceFolderControl.renameWorkspaceFolder(item.label, newPath);
        });
        this.addAction('delete', async (item) => {
            workspace_1.default.workspaceFolderControl.removeWorkspaceFolder(item.label);
        }, { reload: true, persist: true });
        this.addAction('newfile', async (item, context) => {
            let file = await window_1.default.requestInput('File name', item.label + '/');
            if (!file)
                return;
            await workspace_1.default.createFile(file, { overwrite: false, ignoreIfExists: true });
            await this.jumpTo(vscode_uri_1.URI.file(file).toString(), null, context);
        });
    }
    async loadItems() {
        return workspace_1.default.folderPaths.map(p => ({ label: p }));
    }
}
exports.default = FoldList;
//# sourceMappingURL=folders.js.map