"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTraceData = exports.data2String = exports.getTraceMessage = exports.currentTimeStamp = exports.toMethod = exports.getLocale = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("../../logger");
const Is = tslib_1.__importStar(require("../../util/is"));
const node_1 = require("../../util/node");
const protocol_1 = require("../../util/protocol");
function getLocale() {
    const lang = process.env.LANG;
    if (!lang)
        return 'en';
    return lang.split('.')[0];
}
exports.getLocale = getLocale;
function toMethod(type) {
    return Is.string(type) ? type : type.method;
}
exports.toMethod = toMethod;
function currentTimeStamp() {
    return (0, logger_1.getTimestamp)(new Date());
}
exports.currentTimeStamp = currentTimeStamp;
function getTraceMessage(data) {
    if (data.isLSPMessage && data.type) {
        return `[LSP   - ${currentTimeStamp()}] `;
    }
    return `[Trace - ${currentTimeStamp()}] `;
}
exports.getTraceMessage = getTraceMessage;
function data2String(data, color = false) {
    if (data instanceof protocol_1.ResponseError) {
        const responseError = data;
        return `  Message: ${responseError.message}\n  Code: ${responseError.code} ${responseError.data ? '\n' + responseError.data.toString() : ''}`;
    }
    if (data instanceof Error) {
        if (Is.string(data.stack)) {
            return data.stack;
        }
        return data.message;
    }
    if (Is.string(data)) {
        return data;
    }
    return (0, node_1.inspect)(data, false, null, color);
}
exports.data2String = data2String;
function parseTraceData(data) {
    if (typeof data !== 'string')
        return data2String(data);
    let prefixes = ['Params: ', 'Result: '];
    for (let prefix of prefixes) {
        if (data.startsWith(prefix)) {
            try {
                let obj = JSON.parse(data.slice(prefix.length));
                return prefix + data2String(obj, true);
            }
            catch (_e) {
                // ignore
                return data;
            }
        }
    }
    return data;
}
exports.parseTraceData = parseTraceData;
//# sourceMappingURL=index.js.map