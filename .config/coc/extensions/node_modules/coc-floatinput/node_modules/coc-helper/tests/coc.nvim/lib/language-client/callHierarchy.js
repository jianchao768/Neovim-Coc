'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallHierarchyFeature = void 0;
const tslib_1 = require("tslib");
const languages_1 = tslib_1.__importDefault(require("../languages"));
const protocol_1 = require("../util/protocol");
const features_1 = require("./features");
const converter_1 = require("./utils/converter");
class CallHierarchyFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, protocol_1.CallHierarchyPrepareRequest.type);
    }
    fillClientCapabilities(cap) {
        const capabilities = cap;
        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'callHierarchy');
        capability.dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const [id, options] = this.getRegistration(documentSelector, capabilities.callHierarchyProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const provider = {
            prepareCallHierarchy: (document, position, token) => {
                const client = this._client;
                const prepareCallHierarchy = (document, position, token) => {
                    const params = (0, converter_1.asTextDocumentPositionParams)(document, position);
                    return this.sendRequest(protocol_1.CallHierarchyPrepareRequest.type, params, token);
                };
                const middleware = client.middleware;
                return middleware.prepareCallHierarchy
                    ? middleware.prepareCallHierarchy(document, position, token, prepareCallHierarchy)
                    : prepareCallHierarchy(document, position, token);
            },
            provideCallHierarchyIncomingCalls: (item, token) => {
                const client = this._client;
                const provideCallHierarchyIncomingCalls = (item, token) => {
                    return this.sendRequest(protocol_1.CallHierarchyIncomingCallsRequest.type, { item }, token);
                };
                const middleware = client.middleware;
                return middleware.provideCallHierarchyIncomingCalls
                    ? middleware.provideCallHierarchyIncomingCalls(item, token, provideCallHierarchyIncomingCalls)
                    : provideCallHierarchyIncomingCalls(item, token);
            },
            provideCallHierarchyOutgoingCalls: (item, token) => {
                const client = this._client;
                const provideCallHierarchyOutgoingCalls = (item, token) => {
                    return this.sendRequest(protocol_1.CallHierarchyOutgoingCallsRequest.type, { item }, token);
                };
                const middleware = client.middleware;
                return middleware.provideCallHierarchyOutgoingCalls
                    ? middleware.provideCallHierarchyOutgoingCalls(item, token, provideCallHierarchyOutgoingCalls)
                    : provideCallHierarchyOutgoingCalls(item, token);
            }
        };
        return [languages_1.default.registerCallHierarchyProvider(options.documentSelector, provider), provider];
    }
}
exports.CallHierarchyFeature = CallHierarchyFeature;
//# sourceMappingURL=callHierarchy.js.map