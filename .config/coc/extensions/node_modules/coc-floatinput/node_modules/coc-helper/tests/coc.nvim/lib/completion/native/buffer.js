'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.Buffer = void 0;
const tslib_1 = require("tslib");
const util_1 = require("../../util");
const source_1 = tslib_1.__importDefault(require("../source"));
class Buffer extends source_1.default {
    constructor(keywords) {
        super({ name: 'buffer', filepath: __filename });
        this.keywords = keywords;
    }
    get ignoreGitignore() {
        return this.getConfig('ignoreGitignore', true);
    }
    async doComplete(opt, token) {
        let { bufnr, input, word, triggerForInComplete } = opt;
        await (0, util_1.waitImmediate)();
        if (!triggerForInComplete)
            this.noMatchWords = new Set();
        if (input.length === 0 || token.isCancellationRequested)
            return null;
        let iterables = [];
        for (let buf of this.keywords.items) {
            if (buf.bufnr === bufnr || (this.ignoreGitignore && buf.gitIgnored))
                continue;
            iterables.push(buf.matchWords(0));
        }
        let items = new Set();
        let isIncomplete = await this.getResults(iterables, input, word, items, token);
        return {
            isIncomplete, items: Array.from(items).map(s => {
                return { word: s };
            })
        };
    }
}
exports.Buffer = Buffer;
function register(sourceMap, keywords) {
    let source = new Buffer(keywords);
    sourceMap.set('buffer', source);
}
exports.register = register;
//# sourceMappingURL=buffer.js.map