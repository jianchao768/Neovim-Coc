'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const languages_1 = tslib_1.__importStar(require("../languages"));
class FoldHandler {
    constructor(nvim, handler) {
        this.nvim = nvim;
        this.handler = handler;
    }
    async fold(kind) {
        let { doc, winid } = await this.handler.getCurrentState();
        this.handler.checkProvider(languages_1.ProviderName.FoldingRange, doc.textDocument);
        await doc.synchronize();
        let win = this.nvim.createWindow(winid);
        let foldlevel = await this.nvim.eval('&foldlevel');
        let ranges = await this.handler.withRequestToken('foldingrange', token => {
            return languages_1.default.provideFoldingRanges(doc.textDocument, {}, token);
        }, true);
        if (!ranges || !ranges.length)
            return false;
        if (kind)
            ranges = ranges.filter(o => o.kind == kind);
        ranges.sort((a, b) => b.startLine - a.startLine);
        this.nvim.pauseNotification();
        win.setOption('foldmethod', 'manual', true);
        this.nvim.command('normal! zE', true);
        for (let range of ranges) {
            let { startLine, endLine } = range;
            let cmd = `${startLine + 1}, ${endLine + 1}fold`;
            this.nvim.command(cmd, true);
        }
        win.setOption('foldenable', true, true);
        win.setOption('foldlevel', foldlevel, true);
        await this.nvim.resumeNotification(true);
        return true;
    }
}
exports.default = FoldHandler;
//# sourceMappingURL=fold.js.map