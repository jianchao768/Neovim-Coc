'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class WorkspaceSymbolManager extends manager_1.default {
    register(provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector: [{ language: '*' }],
            provider
        });
    }
    async provideWorkspaceSymbols(query, token) {
        let entries = Array.from(this.providers);
        let infos = [];
        let results = await Promise.allSettled(entries.map(o => {
            let { id, provider } = o;
            return Promise.resolve(provider.provideWorkspaceSymbols(query, token)).then(list => {
                if (list)
                    infos.push(...list.map(item => Object.assign({ source: id }, item)));
            });
        }));
        this.handleResults(results, 'provideWorkspaceSymbols');
        return infos;
    }
    async resolveWorkspaceSymbol(symbolInfo, token) {
        let provider = this.getProviderById(symbolInfo.source);
        if (!provider || typeof provider.resolveWorkspaceSymbol !== 'function')
            return symbolInfo;
        return provider.resolveWorkspaceSymbol(symbolInfo, token);
    }
    hasProvider() {
        return this.providers.size > 0;
    }
}
exports.default = WorkspaceSymbolManager;
//# sourceMappingURL=workspaceSymbolsManager.js.map