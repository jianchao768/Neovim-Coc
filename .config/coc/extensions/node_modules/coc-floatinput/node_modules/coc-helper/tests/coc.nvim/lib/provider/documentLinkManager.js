'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const lodash_1 = require("../util/lodash");
const manager_1 = tslib_1.__importDefault(require("./manager"));
function rangeToString(range) {
    return `${range.start.line},${range.start.character},${range.end.line},${range.end.character}`;
}
class DocumentLinkManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    async provideDocumentLinks(document, token) {
        let items = this.getProviders(document);
        if (items.length == 0)
            return null;
        const links = [];
        const seenRanges = new Set();
        const results = await Promise.allSettled(items.map(async (item) => {
            let { id, provider } = item;
            const arr = await provider.provideDocumentLinks(document, token);
            if (Array.isArray(arr)) {
                let check = links.length > 0;
                arr.forEach(link => {
                    if (check) {
                        const rangeString = rangeToString(link.range);
                        if (!seenRanges.has(rangeString)) {
                            seenRanges.add(rangeString);
                            links.push(Object.assign({ source: id }, link));
                        }
                    }
                    else {
                        if (items.length > 1)
                            seenRanges.add(rangeToString(link.range));
                        links.push(Object.assign({ source: id }, link));
                    }
                });
            }
        }));
        this.handleResults(results, 'provideDocumentLinks');
        return links;
    }
    async resolveDocumentLink(link, token) {
        let provider = this.getProviderById(link.source);
        if (typeof provider.resolveDocumentLink === 'function') {
            let resolved = await Promise.resolve(provider.resolveDocumentLink((0, lodash_1.omit)(link, ['source']), token));
            if (resolved)
                Object.assign(link, resolved);
        }
        return link;
    }
}
exports.default = DocumentLinkManager;
//# sourceMappingURL=documentLinkManager.js.map