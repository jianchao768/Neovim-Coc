"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const marked_1 = require("marked");
const renderer_1 = tslib_1.__importStar(require("../../markdown/renderer"));
const styles = tslib_1.__importStar(require("../../markdown/styles"));
const ansiparse_1 = require("../../util/ansiparse");
marked_1.marked.setOptions({
    renderer: new renderer_1.default()
});
function parse(text) {
    let m = (0, marked_1.marked)(text);
    let res = (0, ansiparse_1.parseAnsiHighlights)(m.split(/\n/)[0], true);
    return res;
}
describe('styles', () => {
    it('should add styles', () => {
        let keys = ['gray', 'magenta', 'bold', 'underline', 'italic', 'strikethrough', 'yellow', 'green', 'blue'];
        for (let key of keys) {
            let res = styles[key]('text');
            expect(res).toContain('text');
        }
    });
});
describe('Renderer of marked', () => {
    it('should convert', () => {
        expect((0, renderer_1.identify)('  ', '')).toBe('');
        expect((0, renderer_1.fixHardReturn)('a\rb', true)).toBe('a\nb');
        expect((0, renderer_1.toSpaces)('ab')).toBe('  ');
        expect((0, renderer_1.bulletPointLine)('  ', '  * foo')).toBe('  * foo');
        expect((0, renderer_1.bulletPointLine)('  ', 'foo')).toBe('  foo');
        expect((0, renderer_1.generateTableRow)('')).toEqual([]);
        expect((0, renderer_1.numberedLine)('  ', 'foo', 1).line).toBe('   foo');
    });
    it('should create bold highlights', () => {
        let res = parse('**note**.');
        expect(res.highlights[0]).toEqual({
            span: [0, 4],
            hlGroup: 'CocBold'
        });
    });
    it('should create italic highlights', () => {
        let res = parse('_note_.');
        expect(res.highlights[0]).toEqual({
            span: [0, 4],
            hlGroup: 'CocItalic'
        });
    });
    it('should create underline highlights for link', () => {
        let res = parse('[baidu](https://baidu.com)');
        expect(res.highlights[0]).toEqual({
            span: [0, 5],
            hlGroup: 'CocMarkdownLink'
        });
        res = parse('https://baidu.com');
        expect(res.highlights[0]).toEqual({
            span: [0, 17],
            hlGroup: 'CocUnderline'
        });
        res = parse('https://baidu.com/%25E0%25A4%25A');
        expect(res.line).toBe('');
    });
    it('should parse link', () => {
        // let res = parse('https://doc.rust-lang.org/nightly/core/iter/traits/iterator/Iterator.t.html#map.v')
        // console.log(JSON.stringify(res, null, 2))
        let link = 'https://doc.rust-lang.org/nightly/core/iter/traits/iterator/Iterator.t.html#map.v';
        let parsed = (0, marked_1.marked)(link);
        let res = (0, ansiparse_1.parseAnsiHighlights)(parsed.split(/\n/)[0], true);
        expect(res.line).toEqual(link);
        expect(res.highlights.length).toBeGreaterThan(0);
        expect(res.highlights[0].hlGroup).toBe('CocUnderline');
    });
    it('should create highlight for code span', () => {
        let res = parse('`let foo = "bar"`');
        expect(res.highlights[0]).toEqual({
            span: [0, 15],
            hlGroup: 'CocMarkdownCode'
        });
    });
    it('should create header highlights', () => {
        let res = parse('# header');
        expect(res.highlights[0]).toEqual({
            span: [0, 6],
            hlGroup: 'CocMarkdownHeader'
        });
        res = parse('## header');
        expect(res.highlights[0]).toEqual({
            span: [0, 6],
            hlGroup: 'CocMarkdownHeader'
        });
        res = parse('### header');
        expect(res.highlights[0]).toEqual({
            span: [0, 6],
            hlGroup: 'CocMarkdownHeader'
        });
    });
    it('should indent blockquote', () => {
        let res = parse('> header');
        expect(res.line).toBe('  header');
    });
    it('should parse image', async () => {
        let res = parse('![title](http://www.baidu.com)');
        expect(res.line).toMatch('baidu');
    });
    it('should preserve code block', () => {
        let text = '``` js\nconsole.log("foo")\n```';
        let m = (0, marked_1.marked)(text);
        expect(m.split('\n')).toEqual([
            '``` js',
            'console.log("foo")',
            '```',
            ''
        ]);
    });
    it('should renderer table', () => {
        let text = `
| Syntax      | Description |
| ----------- | ----------- |
| Header      | Title       |
| Paragraph   | Text        |
`;
        let res = (0, marked_1.marked)(text);
        expect(res).toContain('Syntax');
    });
});
//# sourceMappingURL=renderer.test.js.map