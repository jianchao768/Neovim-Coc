'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const object_1 = require("../util/object");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class DocumentColorManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    async provideDocumentColors(document, token) {
        let items = this.getProviders(document);
        let colors = [];
        const results = await Promise.allSettled(items.map(item => {
            let { id } = item;
            return Promise.resolve(item.provider.provideDocumentColors(document, token)).then(arr => {
                let noCheck = colors.length == 0;
                if (Array.isArray(arr)) {
                    for (let color of arr) {
                        if (noCheck || !colors.some(o => (0, object_1.equals)(o.range, color.range))) {
                            colors.push(Object.assign({ source: id }, color));
                        }
                    }
                }
            });
        }));
        this.handleResults(results, 'provideDocumentColors');
        return colors;
    }
    async provideColorPresentations(colorInformation, document, token) {
        let providers = this.getProviders(document);
        let { range, color } = colorInformation;
        for (let item of providers) {
            let res = await Promise.resolve(item.provider.provideColorPresentations(color, { document, range }, token));
            if (res)
                return res;
        }
        return null;
    }
}
exports.default = DocumentColorManager;
//# sourceMappingURL=documentColorManager.js.map