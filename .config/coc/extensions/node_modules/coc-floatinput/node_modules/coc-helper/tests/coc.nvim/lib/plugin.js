'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const commands_1 = tslib_1.__importDefault(require("./commands"));
const completion_1 = tslib_1.__importDefault(require("./completion"));
const sources_1 = tslib_1.__importDefault(require("./completion/sources"));
const channels_1 = tslib_1.__importDefault(require("./core/channels"));
const cursors_1 = tslib_1.__importDefault(require("./cursors"));
const manager_1 = tslib_1.__importDefault(require("./diagnostic/manager"));
const events_1 = tslib_1.__importDefault(require("./events"));
const extension_1 = tslib_1.__importDefault(require("./extension"));
const handler_1 = tslib_1.__importDefault(require("./handler"));
const manager_2 = tslib_1.__importDefault(require("./list/manager"));
const logger_1 = require("./logger");
const services_1 = tslib_1.__importDefault(require("./services"));
const manager_3 = tslib_1.__importDefault(require("./snippets/manager"));
const util_1 = require("./util");
const window_1 = tslib_1.__importDefault(require("./window"));
const workspace_1 = tslib_1.__importDefault(require("./workspace"));
const logger = (0, logger_1.createLogger)('plugin');
class Plugin {
    constructor(nvim) {
        this.nvim = nvim;
        this.ready = false;
        this.initialized = false;
        this.actions = new Map();
        this.disposables = [];
        Object.defineProperty(window_1.default, 'workspace', {
            get: () => workspace_1.default
        });
        Object.defineProperty(workspace_1.default, 'nvim', {
            get: () => this.nvim
        });
        Object.defineProperty(window_1.default, 'nvim', {
            get: () => this.nvim
        });
        Object.defineProperty(window_1.default, 'cursors', {
            get: () => this.cursors
        });
        Object.defineProperty(commands_1.default, 'nvim', {
            get: () => this.nvim
        });
        this.cursors = new cursors_1.default(nvim);
        manager_2.default.init(nvim);
        this.addAction('checkJsonExtension', () => {
            if (extension_1.default.has('coc-json'))
                return;
            void window_1.default.showInformationMessage(`Run :CocInstall coc-json for json intellisense`);
        });
        this.addAction('rootPatterns', (bufnr) => this.handler.workspace.getRootPatterns(bufnr));
        this.addAction('ensureDocument', () => this.handler.workspace.ensureDocument());
        this.addAction('addWorkspaceFolder', (folder) => this.handler.workspace.addWorkspaceFolder(folder));
        this.addAction('getConfig', (key) => this.handler.workspace.getConfiguration(key));
        this.addAction('doAutocmd', (id, ...args) => this.handler.workspace.doAutocmd(id, args));
        this.addAction('openLog', () => this.handler.workspace.openLog());
        this.addAction('attach', () => workspace_1.default.attach());
        this.addAction('detach', () => workspace_1.default.detach());
        this.addAction('doKeymap', (key, defaultReturn) => this.handler.workspace.doKeymap(key, defaultReturn));
        this.addAction('registerExtensions', (...folders) => extension_1.default.manager.loadExtension(folders), 'registExtensions');
        this.addAction('snippetCheck', (checkExpand, checkJump) => this.handler.workspace.snippetCheck(checkExpand, checkJump));
        this.addAction('snippetInsert', (range, newText, mode, ultisnip) => manager_3.default.insertSnippet(newText, true, range, mode, ultisnip));
        this.addAction('snippetNext', () => manager_3.default.nextPlaceholder());
        this.addAction('snippetPrev', () => manager_3.default.previousPlaceholder());
        this.addAction('snippetCancel', () => manager_3.default.cancel());
        this.addAction('openLocalConfig', () => this.handler.workspace.openLocalConfig());
        this.addAction('bufferCheck', () => this.handler.workspace.bufferCheck());
        this.addAction('showInfo', () => this.handler.workspace.showInfo());
        this.addAction('hasProvider', id => this.handler.hasProvider(id));
        this.addAction('cursorsSelect', (bufnr, kind, mode) => this.cursors.select(bufnr, kind, mode));
        this.addAction('fillDiagnostics', (bufnr) => manager_1.default.setLocationlist(bufnr));
        this.addAction('commandList', () => this.handler.commands.getCommandList());
        this.addAction('selectSymbolRange', (inner, visualmode, supportedSymbols) => this.handler.symbols.selectSymbolRange(inner, visualmode, supportedSymbols));
        this.addAction('openList', (...args) => manager_2.default.start(args));
        this.addAction('listNames', () => manager_2.default.names);
        this.addAction('listDescriptions', () => manager_2.default.descriptions);
        this.addAction('listLoadItems', name => manager_2.default.loadItems(name));
        this.addAction('listResume', (name) => manager_2.default.resume(name));
        this.addAction('listCancel', () => manager_2.default.cancel(true));
        this.addAction('listPrev', (name) => manager_2.default.previous(name));
        this.addAction('listNext', (name) => manager_2.default.next(name));
        this.addAction('listFirst', (name) => manager_2.default.first(name));
        this.addAction('listLast', (name) => manager_2.default.last(name));
        this.addAction('sendRequest', (id, method, params) => services_1.default.sendRequest(id, method, params));
        this.addAction('sendNotification', (id, method, params) => services_1.default.sendNotification(id, method, params));
        this.addAction('registerNotification', (id, method) => services_1.default.registerNotification(id, method), 'registNotification');
        this.addAction('updateConfig', (section, val) => workspace_1.default.configurations.updateMemoryConfig({ [section]: val }));
        this.addAction('links', () => this.handler.links.getLinks());
        this.addAction('openLink', () => this.handler.links.openCurrentLink());
        this.addAction('pickColor', () => this.handler.colors.pickColor());
        this.addAction('colorPresentation', () => this.handler.colors.pickPresentation());
        this.addAction('highlight', () => this.handler.documentHighlighter.highlight());
        this.addAction('fold', (kind) => this.handler.fold.fold(kind));
        this.addAction('startCompletion', option => completion_1.default.startCompletion(option));
        this.addAction('sourceStat', () => sources_1.default.sourceStats());
        this.addAction('refreshSource', name => sources_1.default.refresh(name));
        this.addAction('toggleSource', name => sources_1.default.toggleSource(name));
        this.addAction('diagnosticRefresh', bufnr => manager_1.default.refresh(bufnr));
        this.addAction('diagnosticInfo', () => manager_1.default.echoCurrentMessage());
        this.addAction('diagnosticToggle', enable => manager_1.default.toggleDiagnostic(enable));
        this.addAction('diagnosticToggleBuffer', (bufnr, enable) => manager_1.default.toggleDiagnosticBuffer(bufnr, enable));
        this.addAction('diagnosticNext', severity => manager_1.default.jumpNext(severity));
        this.addAction('diagnosticPrevious', severity => manager_1.default.jumpPrevious(severity));
        this.addAction('diagnosticPreview', () => manager_1.default.preview());
        this.addAction('diagnosticList', () => manager_1.default.getDiagnosticList());
        this.addAction('findLocations', (id, method, params, openCommand) => this.handler.locations.findLocations(id, method, params, openCommand));
        this.addAction('getTagList', () => this.handler.locations.getTagList());
        this.addAction('definitions', () => this.handler.locations.definitions());
        this.addAction('declarations', () => this.handler.locations.declarations());
        this.addAction('implementations', () => this.handler.locations.implementations());
        this.addAction('typeDefinitions', () => this.handler.locations.typeDefinitions());
        this.addAction('references', excludeDeclaration => this.handler.locations.references(excludeDeclaration));
        this.addAction('jumpUsed', openCommand => this.handler.locations.gotoReferences(openCommand, false));
        this.addAction('jumpDefinition', openCommand => this.handler.locations.gotoDefinition(openCommand));
        this.addAction('jumpReferences', openCommand => this.handler.locations.gotoReferences(openCommand));
        this.addAction('jumpTypeDefinition', openCommand => this.handler.locations.gotoTypeDefinition(openCommand));
        this.addAction('jumpDeclaration', openCommand => this.handler.locations.gotoDeclaration(openCommand));
        this.addAction('jumpImplementation', openCommand => this.handler.locations.gotoImplementation(openCommand));
        this.addAction('doHover', hoverTarget => this.handler.hover.onHover(hoverTarget));
        this.addAction('definitionHover', hoverTarget => this.handler.hover.definitionHover(hoverTarget));
        this.addAction('getHover', loc => this.handler.hover.getHover(loc));
        this.addAction('showSignatureHelp', () => this.handler.signature.triggerSignatureHelp());
        this.addAction('documentSymbols', (bufnr) => this.handler.symbols.getDocumentSymbols(bufnr));
        this.addAction('symbolRanges', () => this.handler.documentHighlighter.getSymbolsRanges());
        this.addAction('selectionRanges', () => this.handler.selectionRange.getSelectionRanges());
        this.addAction('rangeSelect', (visualmode, forward) => this.handler.selectionRange.selectRange(visualmode, forward));
        this.addAction('rename', newName => this.handler.rename.rename(newName));
        this.addAction('getWorkspaceSymbols', input => this.handler.symbols.getWorkspaceSymbols(input));
        this.addAction('resolveWorkspaceSymbol', symbolInfo => this.handler.symbols.resolveWorkspaceSymbol(symbolInfo));
        this.addAction('formatSelected', mode => this.handler.format.formatCurrentRange(mode));
        this.addAction('format', () => this.handler.format.formatCurrentBuffer());
        this.addAction('commands', () => commands_1.default.commandList);
        this.addAction('services', () => services_1.default.getServiceStats());
        this.addAction('toggleService', name => services_1.default.toggle(name));
        this.addAction('codeAction', (mode, only, noExclude) => this.handler.codeActions.doCodeAction(mode, only, noExclude));
        this.addAction('organizeImport', () => this.handler.codeActions.organizeImport());
        this.addAction('fixAll', () => this.handler.codeActions.doCodeAction(null, [vscode_languageserver_types_1.CodeActionKind.SourceFixAll]));
        this.addAction('doCodeAction', codeAction => this.handler.codeActions.applyCodeAction(codeAction));
        this.addAction('codeActions', (mode, only) => this.handler.codeActions.getCurrentCodeActions(mode, only));
        this.addAction('quickfixes', mode => this.handler.codeActions.getCurrentCodeActions(mode, [vscode_languageserver_types_1.CodeActionKind.QuickFix]));
        this.addAction('codeLensAction', () => this.handler.codeLens.doAction());
        this.addAction('doQuickfix', () => this.handler.codeActions.doQuickfix());
        this.addAction('search', (...args) => this.handler.refactor.search(args));
        this.addAction('saveRefactor', bufnr => this.handler.refactor.save(bufnr));
        this.addAction('refactor', () => this.handler.refactor.doRefactor());
        this.addAction('runCommand', (...args) => this.handler.commands.runCommand(...args));
        this.addAction('repeatCommand', () => this.handler.commands.repeat());
        this.addAction('installExtensions', (...list) => extension_1.default.installExtensions(list));
        this.addAction('updateExtensions', (silent) => extension_1.default.updateExtensions(silent));
        this.addAction('extensionStats', () => extension_1.default.getExtensionStates());
        this.addAction('loadedExtensions', () => extension_1.default.manager.loadedExtensions);
        this.addAction('watchExtension', (id) => extension_1.default.manager.watchExtension(id));
        this.addAction('activeExtension', name => extension_1.default.manager.activate(name));
        this.addAction('deactivateExtension', name => extension_1.default.manager.deactivate(name));
        this.addAction('reloadExtension', name => extension_1.default.manager.reloadExtension(name));
        this.addAction('toggleExtension', name => extension_1.default.manager.toggleExtension(name));
        this.addAction('uninstallExtension', (...args) => extension_1.default.manager.uninstallExtensions(args));
        this.addAction('getCurrentFunctionSymbol', () => this.handler.symbols.getCurrentFunctionSymbol());
        this.addAction('showOutline', (keep) => this.handler.symbols.showOutline(keep));
        this.addAction('hideOutline', () => this.handler.symbols.hideOutline());
        this.addAction('getWordEdit', () => this.handler.rename.getWordEdit());
        this.addAction('addCommand', cmd => this.handler.commands.addVimCommand(cmd));
        this.addAction('addRanges', ranges => this.cursors.addRanges(ranges));
        this.addAction('currentWorkspacePath', () => workspace_1.default.rootPath);
        this.addAction('selectCurrentPlaceholder', triggerAutocmd => manager_3.default.selectCurrentPlaceholder(!!triggerAutocmd));
        this.addAction('codeActionRange', (start, end, only) => this.handler.codeActions.codeActionRange(start, end, only));
        this.addAction('incomingCalls', item => this.handler.callHierarchy.getIncoming(item));
        this.addAction('outgoingCalls', item => this.handler.callHierarchy.getOutgoing(item));
        this.addAction('showIncomingCalls', () => this.handler.callHierarchy.showCallHierarchyTree('incoming'));
        this.addAction('showOutgoingCalls', () => this.handler.callHierarchy.showCallHierarchyTree('outgoing'));
        this.addAction('showSuperTypes', () => this.handler.typeHierarchy.showTypeHierarchyTree('supertypes'));
        this.addAction('showSubTypes', () => this.handler.typeHierarchy.showTypeHierarchyTree('subtypes'));
        this.addAction('inspectSemanticToken', () => this.handler.semanticHighlighter.inspectSemanticToken());
        this.addAction('semanticHighlight', () => this.handler.semanticHighlighter.highlightCurrent());
        this.addAction('showSemanticHighlightInfo', () => this.handler.semanticHighlighter.showHighlightInfo());
    }
    get workspace() {
        return workspace_1.default;
    }
    get completion() {
        return completion_1.default;
    }
    addAction(key, fn, alias) {
        if (this.actions.has(key)) {
            throw new Error(`Action ${key} already exists`);
        }
        this.actions.set(key, fn);
        if (alias)
            this.actions.set(alias, fn);
    }
    async init(rtp) {
        if (this.initialized)
            return;
        this.initialized = true;
        let { nvim } = this;
        await extension_1.default.init(rtp);
        await workspace_1.default.init(window_1.default);
        workspace_1.default.registerTextDocumentContentProvider('output', channels_1.default.getProvider(nvim));
        nvim.setVar('coc_workspace_initialized', true, true);
        manager_3.default.init();
        services_1.default.init();
        sources_1.default.init();
        completion_1.default.init();
        manager_1.default.init();
        this.handler = new handler_1.default(nvim);
        this.disposables.push(this.handler);
        manager_2.default.registerLists();
        await extension_1.default.activateExtensions();
        workspace_1.default.configurations.flushConfigurations();
        nvim.pauseNotification();
        nvim.setVar('coc_service_initialized', 1, true);
        nvim.call('coc#util#do_autocmd', ['CocNvimInit'], true);
        nvim.resumeNotification(false, true);
        logger.info(`coc.nvim initialized with node: ${process.version} after`, Date.now() - (0, util_1.getConditionValue)(global.__starttime, Date.now()));
        this.ready = true;
        await events_1.default.fire('ready', []);
    }
    get isReady() {
        return this.ready;
    }
    hasAction(method) {
        return this.actions.has(method);
    }
    async cocAction(method, ...args) {
        let fn = this.actions.get(method);
        if (!fn)
            throw new Error(`Action "${method}" not exist`);
        return await Promise.resolve(fn.apply(null, args));
    }
    getHandler() {
        return this.handler;
    }
    dispose() {
        (0, util_1.disposeAll)(this.disposables);
        extension_1.default.dispose();
        manager_2.default.dispose();
        workspace_1.default.dispose();
        channels_1.default.dispose();
        window_1.default.dispose();
        sources_1.default.dispose();
        services_1.default.dispose();
        manager_3.default.dispose();
        commands_1.default.dispose();
        completion_1.default.dispose();
        manager_1.default.dispose();
    }
}
exports.default = Plugin;
//# sourceMappingURL=plugin.js.map