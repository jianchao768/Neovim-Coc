'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.asCodeLensParams = exports.asDocumentSymbolParams = exports.asReferenceParams = exports.asTextDocumentIdentifier = exports.asSignatureHelpParams = exports.asTextDocumentPositionParams = exports.asCompletionParams = exports.asUri = exports.asSaveTextDocumentParams = exports.asVersionedTextDocumentIdentifier = exports.asWillSaveTextDocumentParams = exports.asChangeTextDocumentParams = exports.asFullChangeTextDocumentParams = exports.asCloseTextDocumentParams = exports.asRelativePattern = exports.asOpenTextDocumentParams = exports.convertToTextDocumentItem = void 0;
const tslib_1 = require("tslib");
const vscode_uri_1 = require("vscode-uri");
const relativePattern_1 = tslib_1.__importDefault(require("../../model/relativePattern"));
const lodash_1 = require("../../util/lodash");
function convertToTextDocumentItem(document) {
    return {
        uri: document.uri,
        languageId: document.languageId,
        version: document.version,
        text: document.getText()
    };
}
exports.convertToTextDocumentItem = convertToTextDocumentItem;
function asOpenTextDocumentParams(textDocument) {
    return {
        textDocument: convertToTextDocumentItem(textDocument)
    };
}
exports.asOpenTextDocumentParams = asOpenTextDocumentParams;
function asRelativePattern(rp) {
    let { baseUri, pattern } = rp;
    if (typeof baseUri === 'string') {
        return new relativePattern_1.default(vscode_uri_1.URI.parse(baseUri), pattern);
    }
    return new relativePattern_1.default(baseUri, pattern);
}
exports.asRelativePattern = asRelativePattern;
function asCloseTextDocumentParams(document) {
    return {
        textDocument: {
            uri: document.uri
        }
    };
}
exports.asCloseTextDocumentParams = asCloseTextDocumentParams;
function asFullChangeTextDocumentParams(document) {
    let result = {
        textDocument: {
            uri: document.uri,
            version: document.version
        },
        contentChanges: [{ text: document.getText() }]
    };
    return result;
}
exports.asFullChangeTextDocumentParams = asFullChangeTextDocumentParams;
function asChangeTextDocumentParams(event) {
    let { textDocument, contentChanges } = event;
    let result = {
        textDocument: {
            uri: textDocument.uri,
            version: textDocument.version
        },
        contentChanges: contentChanges.slice()
    };
    return result;
}
exports.asChangeTextDocumentParams = asChangeTextDocumentParams;
function asWillSaveTextDocumentParams(event) {
    return {
        textDocument: asVersionedTextDocumentIdentifier(event.document),
        reason: event.reason
    };
}
exports.asWillSaveTextDocumentParams = asWillSaveTextDocumentParams;
function asVersionedTextDocumentIdentifier(textDocument) {
    return {
        uri: textDocument.uri,
        version: textDocument.version
    };
}
exports.asVersionedTextDocumentIdentifier = asVersionedTextDocumentIdentifier;
function asSaveTextDocumentParams(document, includeText) {
    let result = {
        textDocument: asVersionedTextDocumentIdentifier(document)
    };
    if (includeText) {
        result.text = document.getText();
    }
    return result;
}
exports.asSaveTextDocumentParams = asSaveTextDocumentParams;
function asUri(resource) {
    return resource.toString();
}
exports.asUri = asUri;
function asCompletionParams(textDocument, position, context) {
    return {
        textDocument: {
            uri: textDocument.uri,
        },
        position,
        context: (0, lodash_1.omit)(context, ['option']),
    };
}
exports.asCompletionParams = asCompletionParams;
function asTextDocumentPositionParams(textDocument, position) {
    return {
        textDocument: {
            uri: textDocument.uri,
        },
        position
    };
}
exports.asTextDocumentPositionParams = asTextDocumentPositionParams;
function asSignatureHelpParams(textDocument, position, context) {
    return {
        textDocument: asTextDocumentIdentifier(textDocument),
        position,
        context
    };
}
exports.asSignatureHelpParams = asSignatureHelpParams;
function asTextDocumentIdentifier(textDocument) {
    return {
        uri: textDocument.uri
    };
}
exports.asTextDocumentIdentifier = asTextDocumentIdentifier;
function asReferenceParams(textDocument, position, options) {
    return {
        textDocument: {
            uri: textDocument.uri,
        },
        position,
        context: { includeDeclaration: options.includeDeclaration }
    };
}
exports.asReferenceParams = asReferenceParams;
function asDocumentSymbolParams(textDocument) {
    return {
        textDocument: {
            uri: textDocument.uri
        }
    };
}
exports.asDocumentSymbolParams = asDocumentSymbolParams;
function asCodeLensParams(textDocument) {
    return {
        textDocument: {
            uri: textDocument.uri
        }
    };
}
exports.asCodeLensParams = asCodeLensParams;
//# sourceMappingURL=converter.js.map