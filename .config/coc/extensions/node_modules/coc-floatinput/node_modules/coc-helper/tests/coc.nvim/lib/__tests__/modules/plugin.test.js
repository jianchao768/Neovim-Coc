"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const helper_1 = tslib_1.__importDefault(require("../helper"));
const path_1 = tslib_1.__importDefault(require("path"));
const workspace_1 = tslib_1.__importDefault(require("../../workspace"));
const exportObj = tslib_1.__importStar(require("../../index"));
const vsTypes = tslib_1.__importStar(require("vscode-languageserver-types"));
let nvim;
let plugin;
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
    plugin = helper_1.default.plugin;
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
afterEach(async () => {
    await helper_1.default.reset();
});
describe('Plugin', () => {
    it('should check hasAction', () => {
        expect(plugin.hasAction('NOT_EXISTS')).toBe(false);
        expect(plugin.hasAction('rename')).toBe(true);
    });
    it('should throw when action exists', () => {
        expect(() => {
            plugin.addAction('rename', () => { });
        }).toThrow(Error);
    });
});
describe('exports', () => {
    it('should exports all types from vscode-languageserver-types', () => {
        const excludes = ['EOL', 'URI', 'TextDocument'];
        let list = [];
        for (let key of Object.keys(vsTypes)) {
            if (typeof exportObj[key] === 'undefined' && !excludes.includes(key)) {
                list.push(key);
            }
        }
        expect(list.length).toBe(0);
    });
});
describe('help tags', () => {
    it('should generate help tags', async () => {
        let root = workspace_1.default.pluginRoot;
        let dir = await nvim.call('fnameescape', path_1.default.join(root, 'doc'));
        let res = await nvim.call('execute', `helptags ${dir}`);
        expect(res.length).toBe(0);
    });
    it('should return jumpable', async () => {
        let jumpable = await helper_1.default.plugin.cocAction('snippetCheck', false, true);
        expect(jumpable).toBe(false);
    });
    it('should show CocInfo', async () => {
        await helper_1.default.doAction('showInfo');
        let line = await nvim.line;
        expect(line).toMatch('version');
    });
    it('should ensure current document created', async () => {
        await nvim.command('tabe tmp.js');
        let res = await helper_1.default.plugin.cocAction('ensureDocument');
        expect(res).toBe(true);
        let bufnr = await nvim.call('bufnr', ['%']);
        let doc = workspace_1.default.getDocument(bufnr);
        expect(doc).toBeDefined();
    });
});
//# sourceMappingURL=plugin.test.js.map