'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const logger_1 = require("../logger");
const object_1 = require("../util/object");
const protocol_1 = require("../util/protocol");
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const logger = (0, logger_1.createLogger)('provider-manager');
class Manager {
    constructor() {
        this.providers = new Set();
    }
    hasProvider(document) {
        return this.getProvider(document) != null;
    }
    addProvider(item) {
        this.providers.add(item);
        return protocol_1.Disposable.create(() => {
            this.providers.delete(item);
        });
    }
    handleResults(results, name) {
        results.forEach(res => {
            if (res.status === 'rejected') {
                logger.error(`Provider error on ${name}:`, res.reason);
            }
        });
    }
    getProvider(document) {
        let currScore = 0;
        let providerItem;
        for (let item of this.providers) {
            let { selector, priority } = item;
            let score = workspace_1.default.match(selector, document);
            if (score == 0)
                continue;
            if (typeof priority == 'number' && priority > 0) {
                score = score + priority;
            }
            if (score < currScore)
                continue;
            currScore = score;
            providerItem = item;
        }
        return providerItem;
    }
    getProviderById(id) {
        let item = Array.from(this.providers).find(o => o.id == id);
        return item ? item.provider : null;
    }
    getProviders(document) {
        let items = Array.from(this.providers);
        items = items.filter(item => workspace_1.default.match(item.selector, document) > 0);
        return items.sort((a, b) => workspace_1.default.match(b.selector, document) - workspace_1.default.match(a.selector, document));
    }
    addLocation(locations, location) {
        if (Array.isArray(location)) {
            for (let loc of location) {
                if (vscode_languageserver_types_1.Location.is(loc)) {
                    addLocation(locations, loc);
                }
                else if (loc && typeof loc.targetUri === 'string') {
                    addLocation(locations, loc);
                }
            }
        }
        else if (vscode_languageserver_types_1.Location.is(location)) {
            addLocation(locations, location);
        }
    }
}
exports.default = Manager;
/**
 * Add unique location
 */
function addLocation(arr, location) {
    if (vscode_languageserver_types_1.Location.is(location)) {
        let { range, uri } = location;
        if (arr.find(o => o.uri == uri && (0, object_1.equals)(o.range, range)) != null)
            return;
        arr.push(location);
    }
    else if (location && typeof location.targetUri === 'string') {
        let { targetUri, targetSelectionRange, targetRange } = location;
        if (arr.find(o => o.uri == targetUri && (0, object_1.equals)(o.range, targetSelectionRange)) != null)
            return;
        arr.push({
            uri: targetUri,
            range: targetSelectionRange,
            targetRange
        });
    }
}
//# sourceMappingURL=manager.js.map