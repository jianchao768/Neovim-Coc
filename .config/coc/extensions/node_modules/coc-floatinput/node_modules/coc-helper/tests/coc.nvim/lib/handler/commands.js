'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const commands_1 = tslib_1.__importDefault(require("../commands"));
const manager_1 = tslib_1.__importDefault(require("../list/manager"));
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const Is = tslib_1.__importStar(require("../util/is"));
function validCommand(command) {
    return command && Is.string(command.id) && Is.string(command.cmd) && command.id.length > 0 && command.cmd.length > 0;
}
class Commands {
    constructor(nvim) {
        this.nvim = nvim;
        for (let item of workspace_1.default.env.vimCommands) {
            this.addVimCommand(item);
        }
    }
    addVimCommand(cmd) {
        if (!validCommand(cmd))
            return;
        let id = `vim.${cmd.id}`;
        commands_1.default.registerCommand(id, () => {
            this.nvim.command(cmd.cmd, true);
            this.nvim.redrawVim();
        });
        if (cmd.title)
            commands_1.default.titles.set(id, cmd.title);
    }
    getCommandList() {
        return commands_1.default.commandList.map(o => o.id);
    }
    async repeat() {
        await commands_1.default.repeatCommand();
    }
    async runCommand(id, ...args) {
        if (id)
            return await commands_1.default.fireCommand(id, ...args);
        await manager_1.default.start(['commands']);
    }
}
exports.default = Commands;
//# sourceMappingURL=commands.js.map