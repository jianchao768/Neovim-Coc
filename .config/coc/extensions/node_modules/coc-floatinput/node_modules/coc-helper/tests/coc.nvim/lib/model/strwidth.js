"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StrWidth = exports.initStrWidthWasm = void 0;
const constants_1 = require("../util/constants");
const node_1 = require("../util/node");
const wasmPath = node_1.path.join(constants_1.pluginRoot, 'bin/strwidth.wasm');
async function initStrWidthWasm() {
    const buffer = await (0, node_1.promisify)(node_1.fs.readFile)(wasmPath);
    const res = await global.WebAssembly.instantiate(buffer, { env: {} });
    return res.instance.exports;
}
exports.initStrWidthWasm = initStrWidthWasm;
let instance;
class StrWidth {
    constructor(exports) {
        this.exports = exports;
        this.cache = new Map();
        this.bytes = new Uint8Array(exports.memory.buffer);
        this.contentPtr = exports.malloc(4096);
    }
    setAmbw(ambiguousAsDouble) {
        this.exports.setAmbw(ambiguousAsDouble ? 1 : 0);
        this.cache.clear();
    }
    getWidth(content, cache = false) {
        let l = content.length;
        if (l === 0)
            return 0;
        if (l > 4095) {
            content = content.slice(0, 4095);
        }
        if (cache && this.cache.has(content)) {
            return this.cache.get(content);
        }
        let { contentPtr } = this;
        let buf = Buffer.from(content, 'utf8');
        let len = buf.length;
        this.bytes.set(buf, contentPtr);
        this.bytes[contentPtr + len] = 0;
        let res = this.exports.strWidth(contentPtr);
        if (cache)
            this.cache.set(content, res);
        return res;
    }
    static async create() {
        if (instance)
            return instance;
        let api = await initStrWidthWasm();
        instance = new StrWidth(api);
        return instance;
    }
}
exports.StrWidth = StrWidth;
//# sourceMappingURL=strwidth.js.map