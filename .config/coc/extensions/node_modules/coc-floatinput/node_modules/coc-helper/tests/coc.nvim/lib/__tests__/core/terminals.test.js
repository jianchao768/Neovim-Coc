"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const which_1 = tslib_1.__importDefault(require("which"));
const terminals_1 = tslib_1.__importDefault(require("../../core/terminals"));
const window_1 = tslib_1.__importDefault(require("../../window"));
const terminal_1 = require("../../model/terminal");
const helper_1 = tslib_1.__importDefault(require("../helper"));
const uuid_1 = require("uuid");
let nvim;
let terminals;
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
    terminals = new terminals_1.default();
});
afterEach(() => {
    terminals.reset();
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
describe('create terminal', () => {
    it('should use cleaned env', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash'),
            strictEnv: true
        });
        await helper_1.default.wait(10);
        terminal.sendText(`echo $NODE_ENV`, true);
        await helper_1.default.wait(50);
        let buf = nvim.createBuffer(terminal.bufnr);
        let lines = await buf.lines;
        expect(lines.includes('test')).toBe(false);
    });
    it('should use custom shell command', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash')
        });
        let bufnr = terminal.bufnr;
        let bufname = await nvim.call('bufname', [bufnr]);
        expect(bufname.includes('bash')).toBe(true);
    });
    it('should use custom cwd', async () => {
        let basename = path_1.default.basename(os_1.default.tmpdir());
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            cwd: os_1.default.tmpdir()
        });
        let bufnr = terminal.bufnr;
        let bufname = await nvim.call('bufname', [bufnr]);
        expect(bufname.includes(basename)).toBe(true);
    });
    it('should have exit code', async () => {
        let exitStatus;
        terminals.onDidCloseTerminal(terminal => {
            exitStatus = terminal.exitStatus;
        });
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash'),
            strictEnv: true
        });
        terminal.sendText('exit', true);
        await helper_1.default.waitFor('bufloaded', [terminal.bufnr], 0);
        await helper_1.default.waitValue(() => {
            return exitStatus != null;
        }, true);
        expect(exitStatus.code).toBeDefined();
    });
    it('should return false on show when buffer unloaded', async () => {
        let model = new terminal_1.TerminalModel('bash', [], nvim);
        await model.start();
        expect(model.bufnr).toBeDefined();
        await nvim.command(`bd! ${model.bufnr}`);
        let res = await model.show();
        expect(res).toBe(false);
    });
    it('should not throw when show & hide disposed terminal', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash')
        });
        terminal.dispose();
        await terminal.show();
        await terminal.hide();
    });
    it('should show terminal on current window', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash')
        });
        let winid = await nvim.call('bufwinid', [terminal.bufnr]);
        expect(winid).toBeGreaterThan(0);
        await nvim.call('win_gotoid', [winid]);
        await terminal.show();
    });
    it('should show terminal that shown', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash')
        });
        let res = await terminal.show(true);
        expect(res).toBe(true);
    });
    it('should show hidden terminal', async () => {
        let terminal = await terminals.createTerminal(nvim, {
            name: `test-${(0, uuid_1.v4)()}`,
            shellPath: which_1.default.sync('bash')
        });
        await terminal.hide();
        await terminal.show();
    });
    it('should create terminal', async () => {
        let terminal = await window_1.default.createTerminal({
            name: `test-${(0, uuid_1.v4)()}`,
        });
        expect(terminal).toBeDefined();
        expect(terminal.processId).toBeDefined();
        expect(terminal.name).toBeDefined();
        terminal.dispose();
        await helper_1.default.wait(30);
        expect(terminal.bufnr).toBeUndefined();
    });
});
//# sourceMappingURL=terminals.test.js.map