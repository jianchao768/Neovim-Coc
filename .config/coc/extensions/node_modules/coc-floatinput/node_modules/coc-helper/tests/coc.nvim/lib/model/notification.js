'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.toTitles = exports.toButtons = void 0;
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("../events"));
const util_1 = require("../util");
const array_1 = require("../util/array");
function toButtons(texts) {
    return texts.map((s, index) => {
        return { text: s, index };
    });
}
exports.toButtons = toButtons;
function toTitles(items) {
    return items.map(item => typeof item === 'string' ? item : item.title);
}
exports.toTitles = toTitles;
class Notification {
    constructor(nvim, config, attachEvents = true) {
        this.nvim = nvim;
        this.config = config;
        this.disposables = [];
        if (attachEvents) {
            events_1.default.on('BufWinLeave', bufnr => {
                if (bufnr == this.bufnr) {
                    this.dispose();
                    if (config.callback)
                        config.callback(-1);
                }
            }, null, this.disposables);
            let btns = (0, array_1.toArray)(config.buttons).filter(o => o.disabled != true);
            events_1.default.on('FloatBtnClick', (bufnr, idx) => {
                if (bufnr == this.bufnr) {
                    this.dispose();
                    if (config.callback)
                        config.callback(btns[idx].index);
                }
            }, null, this.disposables);
        }
    }
    get lines() {
        return this.config.content ? this.config.content.split(/\r?\n/) : [];
    }
    async show(preferences) {
        let { nvim } = this;
        let { buttons, kind, title } = this.config;
        let opts = Object.assign({}, preferences);
        opts.kind = kind !== null && kind !== void 0 ? kind : '';
        if (title)
            opts.title = title;
        if (preferences.border) {
            opts.borderhighlight = kind ? `CocNotification${kind[0].toUpperCase()}${kind.slice(1)}` : preferences.highlight;
        }
        if (Array.isArray(buttons)) {
            let actions = buttons.filter(o => !o.disabled).map(o => o.text);
            if (actions.length)
                opts.actions = actions;
        }
        let res = await nvim.call('coc#notify#create', [this.lines, opts]);
        this._winid = res[0];
        this.bufnr = res[1];
    }
    get winid() {
        return this._winid;
    }
    dispose() {
        let { winid } = this;
        if (winid) {
            this.nvim.call('coc#notify#close', [winid], true);
            this.nvim.redrawVim();
        }
        this.bufnr = undefined;
        this._winid = undefined;
        (0, util_1.disposeAll)(this.disposables);
    }
}
exports.default = Notification;
//# sourceMappingURL=notification.js.map