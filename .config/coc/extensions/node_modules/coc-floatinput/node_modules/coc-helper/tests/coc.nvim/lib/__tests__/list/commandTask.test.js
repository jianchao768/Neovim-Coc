"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const manager_1 = tslib_1.__importDefault(require("../../list/manager"));
const helper_1 = tslib_1.__importStar(require("../helper"));
const basic_1 = tslib_1.__importDefault(require("../../list/basic"));
const util_1 = require("../../util");
class DataList extends basic_1.default {
    constructor() {
        super(...arguments);
        this.name = 'data';
    }
    async loadItems(_context) {
        let fsPath = await (0, helper_1.createTmpFile)(`console.log('foo');console.log('');console.log('bar');`);
        return this.createCommandTask({
            cmd: 'node',
            args: [fsPath],
            cwd: path_1.default.dirname(fsPath),
            onLine: line => {
                if (!line)
                    return undefined;
                return {
                    label: line
                };
            }
        });
    }
}
class SleepList extends basic_1.default {
    constructor() {
        super(...arguments);
        this.name = 'sleep';
    }
    loadItems(_context) {
        return Promise.resolve(this.createCommandTask({
            cmd: 'sleep',
            args: ['10'],
            onLine: line => {
                return {
                    label: line
                };
            }
        }));
    }
}
class StderrList extends basic_1.default {
    constructor() {
        super(...arguments);
        this.name = 'stderr';
    }
    async loadItems(_context) {
        let fsPath = await (0, helper_1.createTmpFile)(`console.error('stderr');console.log('stdout')`);
        return Promise.resolve(this.createCommandTask({
            cmd: 'node',
            args: [fsPath],
            cwd: path_1.default.dirname(fsPath),
            onLine: line => {
                return {
                    label: line
                };
            }
        }));
    }
}
class ErrorTask extends basic_1.default {
    constructor() {
        super(...arguments);
        this.name = 'error';
    }
    async loadItems(_context) {
        return Promise.resolve(this.createCommandTask({
            cmd: 'NOT_EXISTS',
            args: [],
            cwd: __dirname,
            onLine: line => {
                return {
                    label: line
                };
            }
        }));
    }
}
let nvim;
let disposables = [];
beforeAll(async () => {
    await helper_1.default.setup();
    nvim = helper_1.default.nvim;
});
afterAll(async () => {
    await helper_1.default.shutdown();
});
afterEach(async () => {
    (0, util_1.disposeAll)(disposables);
    manager_1.default.reset();
    await helper_1.default.reset();
});
describe('Command task', () => {
    it('should not show stderr', async () => {
        disposables.push(manager_1.default.registerList(new StderrList()));
        await manager_1.default.start(['stderr']);
        await manager_1.default.session.ui.ready;
        let lines = await nvim.call('getline', [1, '$']);
        expect(lines).toEqual(['stdout']);
    });
    it('should not show error', async () => {
        disposables.push(manager_1.default.registerList(new ErrorTask()));
        await manager_1.default.start(['error']);
        await helper_1.default.wait(300);
        await nvim.command('redraw');
        let len = manager_1.default.session.ui.length;
        expect(len).toBe(0);
    });
    it('should create command task', async () => {
        let list = new DataList();
        disposables.push(manager_1.default.registerList(list));
        await manager_1.default.start(['data']);
        await manager_1.default.session.ui.ready;
        await helper_1.default.wait(100);
        let lines = await nvim.call('getline', [1, '$']);
        expect(lines).toEqual(['foo', 'bar']);
    });
    it('should stop command task', async () => {
        let list = new SleepList();
        disposables.push(manager_1.default.registerList(list));
        await manager_1.default.start(['sleep']);
        manager_1.default.session.stop();
    });
});
//# sourceMappingURL=commandTask.test.js.map