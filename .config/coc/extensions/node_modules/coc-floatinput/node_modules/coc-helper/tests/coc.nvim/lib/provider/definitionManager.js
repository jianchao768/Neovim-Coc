'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class DefinitionManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    async provideDefinition(document, position, token) {
        const providers = this.getProviders(document);
        let locations = [];
        const results = await Promise.allSettled(providers.map(item => {
            return Promise.resolve(item.provider.provideDefinition(document, position, token)).then(location => {
                this.addLocation(locations, location);
            });
        }));
        this.handleResults(results, 'provideDefinition');
        return locations;
    }
    async provideDefinitionLinks(document, position, token) {
        const providers = this.getProviders(document);
        let locations = [];
        const results = await Promise.allSettled(providers.map(item => {
            return Promise.resolve(item.provider.provideDefinition(document, position, token)).then(location => {
                if (Array.isArray(location)) {
                    location.forEach(loc => {
                        if (vscode_languageserver_types_1.LocationLink.is(loc)) {
                            locations.push(loc);
                        }
                    });
                }
            });
        }));
        this.handleResults(results, 'provideDefinition');
        return locations;
    }
}
exports.default = DefinitionManager;
//# sourceMappingURL=definitionManager.js.map