'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("../events"));
const util_1 = require("../util");
/**
 * Buffer sync support, document is always attached and not command line buffer.
 */
class BufferSync {
    constructor(_create, documents) {
        this._create = _create;
        this.disposables = [];
        this.itemsMap = new Map();
        let { disposables } = this;
        for (let doc of documents.attached()) {
            this.create(doc);
        }
        documents.onDidOpenTextDocument(e => {
            this.create(documents.getDocument(e.bufnr));
        }, null, disposables);
        documents.onDidChangeDocument(e => {
            this.onChange(e);
        }, null, disposables);
        documents.onDidCloseDocument(e => {
            this.delete(e.bufnr);
        }, null, disposables);
        events_1.default.on('LinesChanged', bufnr => {
            let o = this.itemsMap.get(bufnr);
            if (o && typeof o.item.onTextChange == 'function') {
                o.item.onTextChange();
            }
        }, null, disposables);
    }
    get items() {
        return Array.from(this.itemsMap.values()).map(x => x.item);
    }
    getItem(bufnr) {
        var _a;
        if (typeof bufnr === 'number') {
            return (_a = this.itemsMap.get(bufnr)) === null || _a === void 0 ? void 0 : _a.item;
        }
        let o = Array.from(this.itemsMap.values()).find(v => {
            return v.uri == bufnr;
        });
        return o ? o.item : undefined;
    }
    create(doc) {
        let o = this.itemsMap.get(doc.bufnr);
        if (o)
            o.item.dispose();
        let item = this._create(doc);
        if (item)
            this.itemsMap.set(doc.bufnr, { uri: doc.uri, item });
    }
    onChange(e) {
        let o = this.itemsMap.get(e.bufnr);
        if (o && typeof o.item.onChange == 'function') {
            o.item.onChange(e);
        }
    }
    delete(bufnr) {
        let o = this.itemsMap.get(bufnr);
        if (o) {
            o.item.dispose();
            this.itemsMap.delete(bufnr);
        }
    }
    reset() {
        for (let o of this.itemsMap.values()) {
            o.item.dispose();
        }
        this.itemsMap.clear();
    }
    dispose() {
        (0, util_1.disposeAll)(this.disposables);
        for (let o of this.itemsMap.values()) {
            o.item.dispose();
        }
        this._create = undefined;
        this.itemsMap.clear();
    }
}
exports.default = BufferSync;
//# sourceMappingURL=bufferSync.js.map