'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.FolderConfigutions = void 0;
const vscode_uri_1 = require("vscode-uri");
const types_1 = require("./types");
const array_1 = require("../util/array");
const fs_1 = require("../util/fs");
const object_1 = require("../util/object");
const model_1 = require("./model");
const util_1 = require("./util");
class FolderConfigutions {
    constructor() {
        this._folderConfigurations = new Map();
    }
    get keys() {
        return this._folderConfigurations.keys();
    }
    has(folder) {
        for (let key of this.keys) {
            if ((0, fs_1.sameFile)(folder, key))
                return true;
        }
        return false;
    }
    set(folder, model) {
        let key = (0, fs_1.normalizeFilePath)(folder);
        this._folderConfigurations.set(key, model);
    }
    get(folder) {
        let key = (0, fs_1.normalizeFilePath)(folder);
        return this._folderConfigurations.get(key);
    }
    delete(folder) {
        let key = (0, fs_1.normalizeFilePath)(folder);
        this._folderConfigurations.delete(key);
    }
    forEach(fn) {
        this._folderConfigurations.forEach(fn);
    }
    getConfigurationByResource(uri) {
        let u = vscode_uri_1.URI.parse(uri);
        if (u.scheme !== 'file')
            return undefined;
        let folders = Array.from(this._folderConfigurations.keys());
        folders.sort((a, b) => b.length - a.length);
        let fullpath = u.fsPath;
        for (let folder of folders) {
            if ((0, fs_1.isParentFolder)(folder, fullpath, true)) {
                return { folder, model: this._folderConfigurations.get(folder) };
            }
        }
        return undefined;
    }
}
exports.FolderConfigutions = FolderConfigutions;
class Configuration {
    constructor(_defaultConfiguration, _userConfiguration, _workspaceConfiguration = new model_1.ConfigurationModel(), _folderConfigurations = new FolderConfigutions(), _memoryConfiguration = new model_1.ConfigurationModel()) {
        this._defaultConfiguration = _defaultConfiguration;
        this._userConfiguration = _userConfiguration;
        this._workspaceConfiguration = _workspaceConfiguration;
        this._folderConfigurations = _folderConfigurations;
        this._memoryConfiguration = _memoryConfiguration;
        this._workspaceConsolidatedConfiguration = null;
        this._resolvedFolderConfigurations = new Map();
        this._memoryConfigurationByResource = new Map();
    }
    updateValue(key, value, overrides = {}) {
        let memoryConfiguration;
        if (overrides.resource) {
            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);
            if (!memoryConfiguration) {
                memoryConfiguration = new model_1.ConfigurationModel();
                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);
            }
        }
        else {
            memoryConfiguration = this._memoryConfiguration;
        }
        if (value === undefined) {
            memoryConfiguration.removeValue(key);
        }
        else {
            memoryConfiguration.setValue(key, value);
        }
        if (!overrides.resource) {
            this._workspaceConsolidatedConfiguration = null;
        }
    }
    hasFolder(folder) {
        return this._folderConfigurations.has(folder);
    }
    addFolderConfiguration(folder, model, resource) {
        this._folderConfigurations.set(folder, model);
        if (resource) {
            this._resolvedFolderConfigurations.set(resource, folder);
        }
    }
    deleteFolderConfiguration(fsPath) {
        this._folderConfigurations.delete(fsPath);
    }
    getWorkspaceConsolidateConfiguration() {
        if (!this._workspaceConsolidatedConfiguration) {
            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this._userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);
            this._workspaceConsolidatedConfiguration = this._workspaceConsolidatedConfiguration.freeze();
        }
        return this._workspaceConsolidatedConfiguration;
    }
    /**
     * Get folder configuration fsPath & model
     *
     * @param uri folder or file uri
     */
    getFolderConfigurationModelForResource(uri) {
        let folder = this._resolvedFolderConfigurations.get(uri);
        if (folder)
            return this._folderConfigurations.get(folder);
        let conf = this._folderConfigurations.getConfigurationByResource(uri);
        if (!conf)
            return undefined;
        this._resolvedFolderConfigurations.set(uri, conf.folder);
        return conf.model;
    }
    resolveFolder(uri) {
        let folder = this._resolvedFolderConfigurations.get(uri);
        if (folder)
            return folder;
        let folders = Array.from(this._folderConfigurations.keys);
        folders.sort((a, b) => b.length - a.length);
        for (let folder of folders) {
            if ((0, fs_1.isParentFolder)(folder, vscode_uri_1.URI.parse(uri).fsPath, true)) {
                this._resolvedFolderConfigurations.set(uri, folder);
                return folder;
            }
        }
        return undefined;
    }
    getConsolidatedConfigurationModel(overrides) {
        let configuration = this.getWorkspaceConsolidateConfiguration();
        if (overrides.resource) {
            let folderConfiguration = this.getFolderConfigurationModelForResource(overrides.resource);
            if (folderConfiguration) {
                configuration = configuration.merge(folderConfiguration);
            }
            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(overrides.resource);
            if (memoryConfigurationForResource) {
                configuration = configuration.merge(memoryConfigurationForResource);
            }
        }
        if (overrides.overrideIdentifier) {
            configuration = configuration.override(overrides.overrideIdentifier);
        }
        return configuration;
    }
    getValue(section, overrides) {
        let configuration = this.getConsolidatedConfigurationModel(overrides);
        return configuration.getValue(section);
    }
    inspect(key, overrides) {
        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(overrides);
        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource);
        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;
        const defaultValue = overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key);
        const userValue = overrides.overrideIdentifier ? this._userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._userConfiguration.freeze().getValue(key);
        const workspaceValue = overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key);
        const workspaceFolderValue = folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined;
        const memoryValue = overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key);
        const value = consolidateConfigurationModel.getValue(key);
        const overrideIdentifiers = (0, array_1.distinct)(consolidateConfigurationModel.overrides.map(override => override.identifiers).flat()).filter(overrideIdentifier => consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined);
        return {
            defaultValue,
            userValue,
            workspaceValue,
            workspaceFolderValue,
            memoryValue,
            value,
            default: defaultValue !== undefined ? { value: this._defaultConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,
            user: userValue !== undefined ? { value: this._userConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._userConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,
            workspace: workspaceValue !== undefined ? { value: this._workspaceConfiguration.freeze().getValue(key), override: overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,
            workspaceFolder: workspaceFolderValue !== undefined ? { value: folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getValue(key), override: overrides.overrideIdentifier ? folderConfigurationModel === null || folderConfigurationModel === void 0 ? void 0 : folderConfigurationModel.freeze().getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,
            memory: memoryValue !== undefined ? { value: memoryConfigurationModel.getValue(key), override: overrides.overrideIdentifier ? memoryConfigurationModel.getOverrideValue(key, overrides.overrideIdentifier) : undefined } : undefined,
            overrideIdentifiers: overrideIdentifiers.length ? overrideIdentifiers : undefined
        };
    }
    get defaults() {
        return this._defaultConfiguration;
    }
    get user() {
        return this._userConfiguration;
    }
    get workspace() {
        return this._workspaceConfiguration;
    }
    get memory() {
        return this._memoryConfiguration;
    }
    getConfigurationModel(target, folder) {
        var _a;
        switch (target) {
            case types_1.ConfigurationTarget.Default:
                return this._defaultConfiguration;
            case types_1.ConfigurationTarget.User:
                return this._userConfiguration;
            case types_1.ConfigurationTarget.Workspace:
                return this._workspaceConfiguration;
            case types_1.ConfigurationTarget.WorkspaceFolder:
                return (_a = this._folderConfigurations.get(folder)) !== null && _a !== void 0 ? _a : new model_1.ConfigurationModel();
            default:
                return this._memoryConfiguration;
        }
    }
    updateFolderConfiguration(folder, model) {
        this._folderConfigurations.set(folder, model);
    }
    updateUserConfiguration(model) {
        this._userConfiguration = model;
        this._workspaceConsolidatedConfiguration = null;
    }
    updateWorkspaceConfiguration(model) {
        this._workspaceConfiguration = model;
        this._workspaceConsolidatedConfiguration = null;
    }
    updateDefaultConfiguration(model) {
        this._defaultConfiguration = model;
        this._workspaceConsolidatedConfiguration = null;
    }
    updateMemoryConfiguration(model) {
        this._memoryConfiguration = model;
        this._workspaceConsolidatedConfiguration = null;
    }
    compareAndUpdateMemoryConfiguration(memory) {
        const { added, updated, removed, overrides } = compare(this._memoryConfiguration, memory);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateMemoryConfiguration(memory);
        }
        return { keys, overrides };
    }
    compareAndUpdateUserConfiguration(user) {
        const { added, updated, removed, overrides } = compare(this._userConfiguration, user);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateUserConfiguration(user);
        }
        return { keys, overrides };
    }
    compareAndUpdateDefaultConfiguration(defaults, keys) {
        const overrides = [];
        if (!keys) {
            const { added, updated, removed } = compare(this._defaultConfiguration, defaults);
            keys = [...added, ...updated, ...removed];
        }
        for (const key of keys) {
            for (const overrideIdentifier of (0, util_1.overrideIdentifiersFromKey)(key)) {
                const fromKeys = this._defaultConfiguration.getKeysForOverrideIdentifier(overrideIdentifier);
                const toKeys = defaults.getKeysForOverrideIdentifier(overrideIdentifier);
                const keys = [
                    ...toKeys.filter(key => fromKeys.indexOf(key) === -1),
                    ...fromKeys.filter(key => toKeys.indexOf(key) === -1),
                    ...fromKeys.filter(key => !(0, object_1.equals)(this._defaultConfiguration.override(overrideIdentifier).getValue(key), defaults.override(overrideIdentifier).getValue(key)))
                ];
                overrides.push([overrideIdentifier, keys]);
            }
        }
        this.updateDefaultConfiguration(defaults);
        return { keys, overrides };
    }
    compareAndUpdateWorkspaceConfiguration(workspaceConfiguration) {
        const { added, updated, removed, overrides } = compare(this._workspaceConfiguration, workspaceConfiguration);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateWorkspaceConfiguration(workspaceConfiguration);
        }
        return { keys, overrides };
    }
    compareAndUpdateFolderConfiguration(folder, folderConfiguration) {
        const currentFolderConfiguration = this._folderConfigurations.get(folder);
        const { added, updated, removed, overrides } = compare(currentFolderConfiguration, folderConfiguration);
        const keys = [...added, ...updated, ...removed];
        if (keys.length || !currentFolderConfiguration) {
            this.updateFolderConfiguration(folder, folderConfiguration);
        }
        return { keys, overrides };
    }
    compareAndDeleteFolderConfiguration(folder) {
        const folderConfig = this._folderConfigurations.get(folder);
        if (!folderConfig)
            return;
        this.deleteFolderConfiguration(folder);
        const { added, updated, removed, overrides } = compare(folderConfig, undefined);
        return { keys: [...added, ...updated, ...removed], overrides };
    }
    allKeys() {
        const keys = new Set();
        this._defaultConfiguration.freeze().keys.forEach(key => keys.add(key));
        this._userConfiguration.freeze().keys.forEach(key => keys.add(key));
        this._workspaceConfiguration.freeze().keys.forEach(key => keys.add(key));
        this._folderConfigurations.forEach(folderConfiguration => folderConfiguration.freeze().keys.forEach(key => keys.add(key)));
        return [...keys.values()];
    }
    toData() {
        let { _defaultConfiguration, _userConfiguration, _workspaceConfiguration, _folderConfigurations } = this;
        let folders = [];
        _folderConfigurations.forEach((model, fsPath) => {
            folders.push([fsPath, model.toJSON()]);
        });
        return {
            defaults: _defaultConfiguration.toJSON(),
            user: _userConfiguration.toJSON(),
            workspace: _workspaceConfiguration.toJSON(),
            folders
        };
    }
    static parse(data) {
        const defaultConfiguration = this.parseConfigurationModel(data.defaults);
        const userConfiguration = this.parseConfigurationModel(data.user);
        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);
        const folderConfigurations = new FolderConfigutions();
        data.folders.forEach(value => {
            folderConfigurations.set(value[0], this.parseConfigurationModel(value[1]));
        });
        return new Configuration(defaultConfiguration, userConfiguration, workspaceConfiguration, folderConfigurations);
    }
    static parseConfigurationModel(model) {
        return new model_1.ConfigurationModel(model.contents, model.keys, model.overrides).freeze();
    }
}
exports.Configuration = Configuration;
function compare(from, to) {
    var _a, _b;
    const { added, removed, updated } = (0, util_1.compareConfigurationContents)(to, from);
    const overrides = [];
    const fromOverrideIdentifiers = (_a = from === null || from === void 0 ? void 0 : from.getAllOverrideIdentifiers()) !== null && _a !== void 0 ? _a : [];
    const toOverrideIdentifiers = (_b = to === null || to === void 0 ? void 0 : to.getAllOverrideIdentifiers()) !== null && _b !== void 0 ? _b : [];
    if (to) {
        const addedOverrideIdentifiers = toOverrideIdentifiers.filter(key => !fromOverrideIdentifiers.includes(key));
        for (const identifier of addedOverrideIdentifiers) {
            overrides.push([identifier, to.getKeysForOverrideIdentifier(identifier)]);
        }
    }
    if (from) {
        const removedOverrideIdentifiers = fromOverrideIdentifiers.filter(key => !toOverrideIdentifiers.includes(key));
        for (const identifier of removedOverrideIdentifiers) {
            overrides.push([identifier, from.getKeysForOverrideIdentifier(identifier)]);
        }
    }
    if (to && from) {
        for (const identifier of fromOverrideIdentifiers) {
            if (toOverrideIdentifiers.includes(identifier)) {
                const result = (0, util_1.compareConfigurationContents)({ contents: from.getOverrideValue(undefined, identifier) || {}, keys: from.getKeysForOverrideIdentifier(identifier) }, { contents: to.getOverrideValue(undefined, identifier) || {}, keys: to.getKeysForOverrideIdentifier(identifier) });
                overrides.push([identifier, [...result.added, ...result.removed, ...result.updated]]);
            }
        }
    }
    return { added, removed, updated, overrides };
}
//# sourceMappingURL=configuration.js.map