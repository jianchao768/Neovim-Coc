'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const vscode_uri_1 = require("vscode-uri");
const commands_1 = tslib_1.__importDefault(require("../../commands"));
const array_1 = require("../../util/array");
const fs_1 = require("../../util/fs");
const node_1 = require("../../util/node");
const string_1 = require("../../util/string");
const basic_1 = tslib_1.__importDefault(require("../basic"));
class LocationList extends basic_1.default {
    constructor() {
        super();
        this.defaultAction = 'open';
        this.description = 'show locations saved by g:coc_jump_locations variable';
        this.name = 'location';
        this.createAction({
            name: 'refactor',
            multiple: true,
            execute: async (items) => {
                let locations = items.map(o => o.location);
                await commands_1.default.executeCommand('editor.action.showRefactor', locations);
            }
        });
        this.addLocationActions();
    }
    async loadItems(context, _token) {
        // filename, lnum, col, text, type
        let locs = await this.nvim.getVar('coc_jump_locations');
        locs = (0, array_1.toArray)(locs);
        let bufnr = context.buffer.id;
        let ignoreFilepath = locs.every(o => o.bufnr == bufnr);
        let items = locs.map(loc => {
            let filename = ignoreFilepath ? '' : loc.filename;
            if (filename.length > 0 && node_1.path.isAbsolute(filename)) {
                filename = (0, fs_1.isParentFolder)(context.cwd, filename) ? node_1.path.relative(context.cwd, filename) : filename;
            }
            return createItem(filename, loc);
        });
        return items;
    }
}
exports.default = LocationList;
function createItem(filename, loc) {
    var _a, _b, _c, _d, _e;
    let uri = (_a = loc.uri) !== null && _a !== void 0 ? _a : vscode_uri_1.URI.file(loc.filename).toString();
    let label = '';
    const ansiHighlights = [];
    let start = 0;
    if (filename.length > 0) {
        label = filename + ' ';
        ansiHighlights.push({ span: [start, start + (0, string_1.byteLength)(filename)], hlGroup: 'Directory' });
    }
    start = (0, string_1.byteLength)(label);
    let lnum = (_b = loc.lnum) !== null && _b !== void 0 ? _b : loc.range.start.line + 1;
    let col = (_c = loc.col) !== null && _c !== void 0 ? _c : (0, string_1.byteLength)(loc.text.slice(0, loc.range.start.character)) + 1;
    let position = `|${loc.type ? loc.type + ' ' : ''}${lnum} Col ${col}|`;
    label += position;
    ansiHighlights.push({ span: [start, start + (0, string_1.byteLength)(position)], hlGroup: 'LineNr' });
    if (loc.type) {
        let hl = loc.type.toLowerCase() === 'error' ? 'Error' : 'WarningMsg';
        ansiHighlights.push({ span: [start + 1, start + (0, string_1.byteLength)(loc.type)], hlGroup: hl });
    }
    if (loc.range && loc.range.start.line == loc.range.end.line) {
        let len = (0, string_1.byteLength)(label) + 1;
        let start = len + (0, string_1.byteLength)(loc.text.slice(0, loc.range.start.character));
        let end = len + (0, string_1.byteLength)(loc.text.slice(0, loc.range.end.character));
        ansiHighlights.push({ span: [start, end], hlGroup: 'Search' });
    }
    label += ' ' + loc.text;
    let filterText = `${filename}${loc.text.trim()}`;
    let location;
    if (loc.range) {
        location = vscode_languageserver_types_1.Location.create(uri, loc.range);
    }
    else {
        let start = vscode_languageserver_types_1.Position.create(loc.lnum - 1, loc.col - 1);
        let end = vscode_languageserver_types_1.Position.create(((_d = loc.end_lnum) !== null && _d !== void 0 ? _d : loc.lnum) - 1, ((_e = loc.end_col) !== null && _e !== void 0 ? _e : loc.col) - 1);
        location = vscode_languageserver_types_1.Location.create(uri, vscode_languageserver_types_1.Range.create(start, end));
    }
    location.targetRange = loc.targetRange ? loc.targetRange : vscode_languageserver_types_1.Range.create(lnum - 1, 0, lnum - 1, 99);
    return {
        label,
        location,
        filterText,
        ansiHighlights,
    };
}
//# sourceMappingURL=location.js.map