'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const jsonc_parser_1 = require("jsonc-parser");
const vscode_uri_1 = require("vscode-uri");
const logger_1 = require("../logger");
const node_1 = require("../util/node");
const logger = (0, logger_1.createLogger)('configuration-shape');
class ConfigurationProxy {
    constructor(resolver, _test = global.__TEST__) {
        this.resolver = resolver;
        this._test = _test;
    }
    get root() {
        return this.resolver.root;
    }
    async modifyConfiguration(fsPath, key, value) {
        if (this._test)
            return;
        logger.info(`modify configuration file: ${fsPath}`, key, value);
        let dir = node_1.path.dirname(fsPath);
        let formattingOptions = { tabSize: 2, insertSpaces: true };
        if (!node_1.fs.existsSync(dir))
            node_1.fs.mkdirSync(dir, { recursive: true });
        let content = node_1.fs.readFileSync(fsPath, { encoding: 'utf8', flag: 'a+' });
        content = content || '{}';
        let edits = (0, jsonc_parser_1.modify)(content, [key], value, { formattingOptions });
        content = (0, jsonc_parser_1.applyEdits)(content, edits);
        node_1.fs.writeFileSync(fsPath, content, { encoding: 'utf8' });
    }
    getWorkspaceFolder(resource) {
        if (typeof this.resolver.getWorkspaceFolder === 'function') {
            let workspaceFolder = this.resolver.getWorkspaceFolder(resource);
            if (workspaceFolder)
                return vscode_uri_1.URI.parse(workspaceFolder.uri);
        }
        return undefined;
    }
}
exports.default = ConfigurationProxy;
//# sourceMappingURL=shape.js.map