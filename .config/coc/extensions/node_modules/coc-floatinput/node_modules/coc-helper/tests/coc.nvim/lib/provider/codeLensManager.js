'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const lodash_1 = require("../util/lodash");
const manager_1 = tslib_1.__importDefault(require("./manager"));
const is_1 = require("../util/is");
class CodeLensManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    async provideCodeLenses(document, token) {
        let providers = this.getProviders(document);
        let codeLens = [];
        let results = await Promise.allSettled(providers.map(item => {
            let { provider, id } = item;
            return Promise.resolve(provider.provideCodeLenses(document, token)).then(res => {
                if (Array.isArray(res)) {
                    for (let item of res) {
                        codeLens.push(Object.assign({ source: id }, item));
                    }
                }
            });
        }));
        this.handleResults(results, 'provideCodeLenses');
        return codeLens;
    }
    async resolveCodeLens(codeLens, token) {
        // no need to resolve
        if ((0, is_1.isCommand)(codeLens.command))
            return codeLens;
        let provider = this.getProviderById(codeLens.source);
        if (!provider || typeof provider.resolveCodeLens != 'function') {
            return codeLens;
        }
        let res = await Promise.resolve(provider.resolveCodeLens((0, lodash_1.omit)(codeLens, ['source']), token));
        Object.assign(codeLens, res);
        return codeLens;
    }
}
exports.default = CodeLensManager;
//# sourceMappingURL=codeLensManager.js.map