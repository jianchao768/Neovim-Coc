'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommand = void 0;
const util_1 = require("../util");
const array_1 = require("../util/array");
const protocol_1 = require("../util/protocol");
let autocmdMaxId = 0;
const groupName = 'coc_dynamic_autocmd';
class Autocmds {
    constructor() {
        this.autocmds = new Map();
        this.disposables = [];
    }
    attach(nvim, env) {
        this.nvim = nvim;
        this.env = env;
    }
    async doAutocmd(id, args) {
        let autocmd = this.autocmds.get(id);
        if (autocmd)
            await Promise.resolve(autocmd.callback.apply(autocmd.thisArg, args));
    }
    registerAutocmd(autocmd) {
        autocmdMaxId += 1;
        let id = autocmdMaxId;
        this.autocmds.set(id, autocmd);
        this.nvim.command(createCommand(id, autocmd), true);
        return protocol_1.Disposable.create(() => {
            this.autocmds.delete(id);
            this.resetDynamicAutocmd();
        });
    }
    resetDynamicAutocmd() {
        let { nvim } = this;
        nvim.pauseNotification();
        nvim.command(`autocmd! ${groupName}`, true);
        for (let [id, autocmd] of this.autocmds.entries()) {
            nvim.command(createCommand(id, autocmd), true);
        }
        nvim.resumeNotification(false, true);
    }
    dispose() {
        this.nvim.command(`autocmd! ${groupName}`, true);
        (0, util_1.disposeAll)(this.disposables);
    }
}
exports.default = Autocmds;
function createCommand(id, autocmd) {
    let args = (0, array_1.isFalsyOrEmpty)(autocmd.arglist) ? '' : ', ' + autocmd.arglist.join(', ');
    let event = Array.isArray(autocmd.event) ? autocmd.event.join(',') : autocmd.event;
    let pattern = autocmd.pattern != null ? autocmd.pattern : '*';
    if (/\buser\b/i.test(event)) {
        pattern = '';
    }
    let method = autocmd.request ? 'request' : 'notify';
    return `autocmd! ${groupName} ${event} ${pattern} call coc#rpc#${method}('doAutocmd', [${id}${args}])`;
}
exports.createCommand = createCommand;
//# sourceMappingURL=autocmds.js.map