'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class RenameManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    /**
     * Multiple providers can be registered for a language. In that case providers are sorted
     * by their {@link workspace.match score} and asked in sequence. The first provider producing a result
     * defines the result of the whole operation.
     */
    async provideRenameEdits(document, position, newName, token) {
        let items = this.getProviders(document);
        let edit = null;
        for (const item of items) {
            try {
                edit = await Promise.resolve(item.provider.provideRenameEdits(document, position, newName, token));
            }
            catch (e) {
                this.handleResults([{ status: 'rejected', reason: e }], 'provideRenameEdits');
            }
            if (edit != null)
                break;
        }
        return edit;
    }
    async prepareRename(document, position, token) {
        let items = this.getProviders(document);
        items = items.filter(o => typeof o.provider.prepareRename === 'function');
        if (items.length === 0)
            return null;
        for (const item of items) {
            let res = await Promise.resolve(item.provider.prepareRename(document, position, token));
            // can rename
            if (res != null)
                return res;
        }
        return false;
    }
}
exports.default = RenameManager;
//# sourceMappingURL=renameManager.js.map