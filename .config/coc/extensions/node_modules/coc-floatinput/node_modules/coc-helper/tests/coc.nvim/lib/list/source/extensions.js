'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtensionPriority = exports.getExtensionPrefix = exports.sortExtensionItem = void 0;
const tslib_1 = require("tslib");
const vscode_uri_1 = require("vscode-uri");
const extension_1 = tslib_1.__importDefault(require("../../extension"));
const util_1 = require("../../util");
const node_1 = require("../../util/node");
const workspace_1 = tslib_1.__importDefault(require("../../workspace"));
const basic_1 = tslib_1.__importDefault(require("../basic"));
const formatting_1 = require("../formatting");
const delay = (0, util_1.getConditionValue)(50, 0);
class ExtensionList extends basic_1.default {
    constructor(manager) {
        super();
        this.manager = manager;
        this.defaultAction = 'toggle';
        this.description = 'manage coc extensions';
        this.name = 'extensions';
        this.addAction('toggle', async (item) => {
            let { id, state } = item.data;
            if (state == 'disabled')
                return;
            if (state == 'activated') {
                await this.manager.deactivate(id);
            }
            else {
                await this.manager.activate(id);
            }
            await (0, util_1.wait)(delay);
        }, { persist: true, reload: true, parallel: true });
        this.addAction('configuration', async (item) => {
            let { root } = item.data;
            let jsonFile = node_1.path.join(root, 'package.json');
            if (node_1.fs.existsSync(jsonFile)) {
                let lines = node_1.fs.readFileSync(jsonFile, 'utf8').split(/\r?\n/);
                let idx = lines.findIndex(s => s.includes('"contributes"'));
                await workspace_1.default.jumpTo(vscode_uri_1.URI.file(jsonFile), { line: idx == -1 ? 0 : idx, character: 0 });
            }
        });
        this.addAction('open', async (item) => {
            let { root } = item.data;
            workspace_1.default.nvim.call('coc#ui#open_url', [root], true);
        });
        this.addAction('disable', async (item) => {
            let { id, state } = item.data;
            if (state !== 'disabled')
                await this.manager.toggleExtension(id);
        }, { persist: true, reload: true, parallel: true });
        this.addAction('enable', async (item) => {
            let { id, state } = item.data;
            if (state == 'disabled')
                await this.manager.toggleExtension(id);
        }, { persist: true, reload: true, parallel: true });
        this.addAction('lock', async (item) => {
            let { id } = item.data;
            this.manager.states.setLocked(id, true);
        }, { persist: true, reload: true });
        this.addAction('help', async (item) => {
            let { root } = item.data;
            let files = node_1.fs.readdirSync(root, { encoding: 'utf8' });
            let file = files.find(f => /^readme/i.test(f));
            if (file)
                await workspace_1.default.jumpTo(vscode_uri_1.URI.file(file));
        });
        this.addAction('reload', async (item) => {
            let { id } = item.data;
            await this.manager.reloadExtension(id);
        }, { persist: true, reload: true });
        this.addMultipleAction('uninstall', async (items) => {
            let ids = [];
            for (let item of items) {
                if (item.data.isLocal)
                    continue;
                ids.push(item.data.id);
            }
            await this.manager.uninstallExtensions(ids);
        });
    }
    async loadItems() {
        let items = [];
        let list = await extension_1.default.getExtensionStates();
        for (let stat of list) {
            let prefix = getExtensionPrefix(stat.state);
            let root = node_1.fs.realpathSync(stat.root);
            let locked = stat.isLocked;
            items.push({
                label: [`${prefix} ${stat.id}${locked ? ' î‚¢' : ''}`, ...(stat.isLocal ? ['[RTP]'] : []), stat.version, root.replace(node_1.os.homedir(), '~')],
                filterText: stat.id,
                data: {
                    id: stat.id,
                    root,
                    state: stat.state,
                    isLocal: stat.isLocal,
                    priority: getExtensionPriority(stat.state)
                }
            });
        }
        items.sort(sortExtensionItem);
        return (0, formatting_1.formatListItems)(this.alignColumns, items);
    }
    doHighlight() {
        let { nvim } = this;
        nvim.pauseNotification();
        nvim.command('syntax match CocExtensionsActivited /\\v^\\*/ contained containedin=CocExtensionsLine', true);
        nvim.command('syntax match CocExtensionsLoaded /\\v^\\+/ contained containedin=CocExtensionsLine', true);
        nvim.command('syntax match CocExtensionsDisabled /\\v^-/ contained containedin=CocExtensionsLine', true);
        nvim.command('syntax match CocExtensionsName /\\v%3c\\S+/ contained containedin=CocExtensionsLine', true);
        nvim.command('syntax match CocExtensionsRoot /\\v\\t[^\\t]*$/ contained containedin=CocExtensionsLine', true);
        nvim.command('syntax match CocExtensionsLocal /\\v\\[RTP\\]/ contained containedin=CocExtensionsLine', true);
        nvim.command('highlight default link CocExtensionsActivited Special', true);
        nvim.command('highlight default link CocExtensionsLoaded Normal', true);
        nvim.command('highlight default link CocExtensionsDisabled Comment', true);
        nvim.command('highlight default link CocExtensionsName String', true);
        nvim.command('highlight default link CocExtensionsLocal MoreMsg', true);
        nvim.command('highlight default link CocExtensionsRoot Comment', true);
        nvim.resumeNotification(false, true);
    }
}
exports.default = ExtensionList;
function sortExtensionItem(a, b) {
    if (a.data.priority != b.data.priority) {
        return b.data.priority - a.data.priority;
    }
    return b.data.id > a.data.id ? 1 : -1;
}
exports.sortExtensionItem = sortExtensionItem;
function getExtensionPrefix(state) {
    let prefix = '+';
    if (state == 'disabled') {
        prefix = '-';
    }
    else if (state == 'activated') {
        prefix = '*';
    }
    else if (state == 'unknown') {
        prefix = '?';
    }
    return prefix;
}
exports.getExtensionPrefix = getExtensionPrefix;
function getExtensionPriority(stat) {
    switch (stat) {
        case 'unknown':
            return 2;
        case 'activated':
            return 1;
        case 'disabled':
            return -1;
        default:
            return 0;
    }
}
exports.getExtensionPriority = getExtensionPriority;
//# sourceMappingURL=extensions.js.map