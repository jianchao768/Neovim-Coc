'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.asDocumentSymbolTree = void 0;
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const array_1 = require("../util/array");
const position_1 = require("../util/position");
const string_1 = require("../util/string");
const manager_1 = tslib_1.__importDefault(require("./manager"));
class DocumentSymbolManager extends manager_1.default {
    register(selector, provider) {
        return this.addProvider({
            id: (0, uuid_1.v4)(),
            selector,
            provider
        });
    }
    getMetaData(document) {
        var _a;
        let item = this.getProvider(document);
        if (!item)
            return null;
        return (_a = item.provider.meta) !== null && _a !== void 0 ? _a : {};
    }
    async provideDocumentSymbols(document, token) {
        let item = this.getProvider(document);
        if (!item)
            return null;
        let symbols = [];
        let results = await Promise.allSettled([item].map(item => {
            return Promise.resolve(item.provider.provideDocumentSymbols(document, token)).then(result => {
                if (!token.isCancellationRequested && !(0, array_1.isFalsyOrEmpty)(result)) {
                    if (vscode_languageserver_types_1.DocumentSymbol.is(result[0])) {
                        symbols = result;
                    }
                    else {
                        symbols = asDocumentSymbolTree(result);
                    }
                }
            });
        }));
        this.handleResults(results, 'provideDocumentSymbols');
        return symbols;
    }
}
exports.default = DocumentSymbolManager;
function asDocumentSymbolTree(infos) {
    infos = infos.slice().sort((a, b) => {
        return (0, position_1.compareRangesUsingStarts)(a.location.range, b.location.range);
    });
    const res = [];
    const parentStack = [];
    for (const info of infos) {
        const element = {
            name: (0, string_1.toText)(info.name),
            kind: info.kind,
            tags: (0, array_1.toArray)(info.tags),
            detail: '',
            range: info.location.range,
            selectionRange: info.location.range,
        };
        if (info.deprecated) {
            element.tags.push(vscode_languageserver_types_1.SymbolTag.Deprecated);
        }
        // eslint-disable-next-line no-constant-condition
        while (true) {
            if (parentStack.length === 0) {
                parentStack.push(element);
                res.push(element);
                break;
            }
            const parent = parentStack[parentStack.length - 1];
            if ((0, position_1.rangeInRange)(element.range, parent.range) && !(0, position_1.equalsRange)(parent.range, element.range)) {
                parent.children = (0, array_1.toArray)(parent.children);
                parent.children.push(element);
                parentStack.push(element);
                break;
            }
            parentStack.pop();
        }
    }
    return res;
}
exports.asDocumentSymbolTree = asDocumentSymbolTree;
//# sourceMappingURL=documentSymbolManager.js.map