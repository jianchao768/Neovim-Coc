'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextLine = void 0;
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
/**
 * Represents a line of text, such as a line of source code.
 *
 * TextLine objects are __immutable__. When a {@link TextDocument document} changes,
 * previously retrieved lines will not represent the latest state.
 */
class TextLine {
    constructor(line, text, isLastLine) {
        this._line = line;
        this._text = text;
        this._isLastLine = isLastLine;
    }
    /**
     * The zero-based line number.
     */
    get lineNumber() {
        return this._line;
    }
    /**
     * The text of this line without the line separator characters.
     */
    get text() {
        return this._text;
    }
    /**
     * The range this line covers without the line separator characters.
     */
    get range() {
        return vscode_languageserver_types_1.Range.create(this._line, 0, this._line, this._text.length);
    }
    /**
     * The range this line covers with the line separator characters.
     */
    get rangeIncludingLineBreak() {
        return this._isLastLine ? this.range : vscode_languageserver_types_1.Range.create(this._line, 0, this._line + 1, 0);
    }
    /**
     * The offset of the first character which is not a whitespace character as defined
     * by `/\s/`. **Note** that if a line is all whitespace the length of the line is returned.
     */
    get firstNonWhitespaceCharacterIndex() {
        // TODO@api, rename to 'leadingWhitespaceLength'
        return /^(\s*)/.exec(this._text)[1].length;
    }
    /**
     * Whether this line is whitespace only, shorthand
     * for {@link TextLine.firstNonWhitespaceCharacterIndex} === {@link TextLine.text TextLine.text.length}.
     */
    get isEmptyOrWhitespace() {
        return this.firstNonWhitespaceCharacterIndex === this._text.length;
    }
}
exports.TextLine = TextLine;
//# sourceMappingURL=textline.js.map