'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../util/constants");
/**
 * More methods for float window/popup
 */
class Popup {
    constructor(nvim, winid, bufnr, linecount, _currIndex = 0) {
        this.nvim = nvim;
        this.winid = winid;
        this.bufnr = bufnr;
        this.linecount = linecount;
        this._currIndex = _currIndex;
    }
    get currIndex() {
        return this._currIndex;
    }
    close() {
        this.nvim.call('coc#float#close', [this.winid], true);
    }
    refreshScrollbar() {
        if (!constants_1.isVim)
            this.nvim.call('coc#float#nvim_scrollbar', [this.winid], true);
    }
    execute(cmd) {
        this.nvim.call('coc#compat#execute', [this.winid, cmd], true);
    }
    async getWininfo() {
        return await this.nvim.call('coc#float#get_wininfo', [this.winid]);
    }
    /**
     * Simple scroll method, not consider wrapped lines.
     */
    async scrollForward() {
        let { nvim, bufnr } = this;
        let buf = nvim.createBuffer(bufnr);
        let total = await buf.length;
        let { botline } = await this.getWininfo();
        if (botline >= total || botline == 0)
            return;
        nvim.pauseNotification();
        this.setCursor(botline - 1);
        this.execute(`silent! noa setl scrolloff=0`);
        this.execute(`normal! ${botline}Gzt`);
        this.refreshScrollbar();
        nvim.command('redraw', true);
        nvim.resumeNotification(false, true);
    }
    /**
     * Simple scroll method, not consider wrapped lines.
     */
    async scrollBackward() {
        let { nvim } = this;
        let { topline } = await this.getWininfo();
        if (topline == 1)
            return;
        nvim.pauseNotification();
        this.setCursor(topline - 1);
        this.execute(`normal! ${topline}Gzb`);
        this.refreshScrollbar();
        nvim.command('redraw', true);
        nvim.resumeNotification(false, true);
    }
    /**
     * Move cursor and highlight.
     */
    setCursor(index, redraw = false) {
        let { nvim, bufnr, winid, linecount } = this;
        if (index < 0) {
            index = 0;
        }
        else if (index > linecount - 1) {
            index = linecount - 1;
        }
        this._currIndex = index;
        nvim.call('coc#dialog#set_cursor', [winid, bufnr, index + 1], true);
        if (redraw) {
            this.refreshScrollbar();
            nvim.command('redraw', true);
        }
    }
}
exports.default = Popup;
//# sourceMappingURL=popup.js.map