import type { Buffer, BufferHighlight } from 'coc.nvim';
import type { FloatingWindow } from './FloatingWindow';
import { Notifier } from './notifier';
/**
 * @deprecated Because VimModule deprecated
 */
export declare namespace FloatingUtil {
    type Edges = [
        top: number,
        right: number,
        bottom: number,
        left: number
    ];
    /**
     * top and left is 0-index
     */
    type Box = [top: number, left: number, width: number, height: number];
    /**
     * top and left is 0-index
     */
    type Position = [top: number, left: number];
    type Size = [width: number, height: number];
    type Context = {
        lines: number;
        columns: number;
        globalCursorPosition: Position;
        title: {
            text: string;
            width: number;
        };
        borderEnabled: boolean;
        border: Edges;
        paddingEnabled: boolean;
        padding: Edges;
    };
    type WinConfig = VimWinConfig | NvimWinConfig;
    type VimWinConfig = {
        line: number;
        col: number;
        zindex: number;
        minwidth: number;
        minheight: number;
        maxwidth: number;
        maxheight: number;
        pos?: string;
        highlight?: string;
        title?: string;
        padding?: number[];
        border?: number[];
        borderchars?: string[];
        borderhighlight?: string[];
        close?: 'button' | 'click' | 'none';
    };
    type NvimWinConfig = {
        relative: 'editor' | 'win' | 'cursor';
        row: number;
        col: number;
        width: number;
        height: number;
        focusable: boolean;
    };
}
/**
 * @deprecated Because VimModule deprecated
 */
export declare class FloatingUtil {
    protected srcId: string;
    constructor(srcId: string);
    createContext(options: FloatingWindow.OpenOptions): Promise<FloatingUtil.Context>;
    protected storeCursorPosition?: FloatingUtil.Position;
    getCenterPos(ctx: FloatingUtil.Context, box: FloatingUtil.Box): FloatingUtil.Position;
    getPosForAround(ctx: FloatingUtil.Context, size: FloatingUtil.Size, cursorPosition: FloatingUtil.Position, preferAbove?: boolean): FloatingUtil.Position;
    /**
     * Extend around number to 4
     */
    extendEdges(edges?: number[]): FloatingUtil.Edges;
    /**
     * Change window box by around edges
     */
    changeBoxByEdgesList(box: FloatingUtil.Box, edgesList: (FloatingUtil.Edges | undefined)[]): FloatingUtil.Box;
    /**
     * Change window box by around edge
     */
    changeBoxByEdges(box: FloatingUtil.Box, edges?: FloatingUtil.Edges): FloatingUtil.Box;
    getBoxSizes(ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, updateCursorPosition: boolean): {
        contentBox: FloatingUtil.Box;
        paddingBox: FloatingUtil.Box;
        borderBox: FloatingUtil.Box;
    };
    vimWinConfig(ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, updateCursorPosition: boolean): FloatingUtil.VimWinConfig;
    nvimWinConfig(ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, updateCursorPosition: boolean): [
        winConfig: FloatingUtil.NvimWinConfig,
        borderWinConfig?: FloatingUtil.NvimWinConfig
    ];
    winConfig(ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, updateCursorPosition?: boolean): [
        winConfig: FloatingUtil.WinConfig,
        borderWinConfig?: FloatingUtil.NvimWinConfig
    ];
    getRenderBorderData(ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, winOptions: FloatingUtil.Size): {
        lines: string[];
        highlights: BufferHighlight[];
    } | undefined;
    renderBorderNotifier(buf: Buffer, ctx: FloatingUtil.Context, options: FloatingWindow.OpenOptions, winOptions: FloatingUtil.WinConfig): Notifier;
    nvimWinHl(options: FloatingWindow.OpenOptions): string;
    addHighlightsNotify(buf: Buffer, highlights: BufferHighlight[]): void;
}
