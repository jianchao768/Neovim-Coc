"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utilModule = void 0;
const VimModule_1 = require("../VimModule");
const coc_nvim_1 = require("coc.nvim");
/**
 * @deprecated Because VimModule deprecated
 */
exports.utilModule = VimModule_1.VimModule.create('util', (m) => {
    const isNvim = coc_nvim_1.workspace.isNvim;
    return {
        globalCursorPosition: m.fn('global_cursor_position', ({ name }) => `
        function! ${name}()
          let nr = winnr()
          let [row, col] = win_screenpos(nr)
          return [row + winline() - 2, col + wincol() - 2]
        endfunction
      `),
        isFloat: m.fn('is_float', ({ name }) => isNvim
            ? `
          function! ${name}(winnr) abort
            if !exists('*nvim_win_get_config')
              return v:false
            endif
            let winid = win_getid(a:winnr)
            return nvim_win_get_config(winid)['relative'] != ''
          endfunction
        `
            : `
          function! ${name}(winnr) abort
            return v:false
          endfunction
        `),
        closeWinByBufnr: m.fn('close_win_by_bufnr', ({ name }) => `
        if exists('*nvim_win_close')
          function! ${name}(bufnrs) abort
            for bufnr in a:bufnrs
              try
                let winid = bufwinid(bufnr)
                if winid >= 0
                  call nvim_win_close(winid, v:true)
                endif
              catch
              endtry
            endfor
          endfunction
        else
          function! ${name}(bufnrs) abort
            for bufnr in a:bufnrs
              try
                let winnr = bufwinnr(bufnr)
                if winnr >= 0
                  execute winnr . 'wincmd c'
                endif
              catch
              endtry
            endfor
          endfunction
        endif
      `),
        runCocCmd: m.fn('run_coc_cmd', ({ name }) => `
        function! ${name}(name, ...) abort
          return call('CocAction', extend(['runCommand', a:name], a:000))
        endfunction
      `),
        runCocCmdAsync: m.fn('run_coc_cmd_async', ({ name }) => `
        function! ${name}(name, ...) abort
          return call('CocActionAsync', extend(['runCommand', a:name], a:000))
        endfunction
      `),
    };
});
