import type { ExtensionContext } from 'coc.nvim';
import { Notifier } from './notifier';
/**
 * @deprecated Because VimModule will make the code difficult to debug
 */
export declare namespace VimModule {
    type InitQueueFn = (context: ExtensionContext) => void | Promise<void>;
    type FnCaller<Args extends any[], R> = {
        name: string;
        inlineCall: (argsExpression?: string) => string;
        call: (...args: Args) => Promise<R>;
        callNotify: (...args: Args) => void;
        callNotifier: (...args: Args) => Notifier;
    };
    type Var<V> = {
        name: string;
        inline: string;
        get: () => Promise<V>;
        set: (expression: string) => Promise<void>;
        setNotify: (expression: string) => void;
        setNotifier: (expression: string) => Notifier;
    };
    type Context = {
        name: string;
    };
}
/**
 * @deprecated Because VimModule will make the code difficult to debug
 */
export declare class VimModule {
    moduleKey: string;
    static inited: boolean;
    static init(context: ExtensionContext): Promise<void>;
    private static initQueue;
    private static initAfterQueue;
    static registerInit(description: string, fn: VimModule.InitQueueFn): void;
    static create<T extends object>(moduleName: string, cb: (m: VimModule) => T): T;
    constructor(moduleKey: string);
    /** @deprecated */
    registerInit(initFn: VimModule.InitQueueFn): void;
    registerInit(description: string, initFn: VimModule.InitQueueFn): void;
    fn<Args extends any[], R>(fnName: string, getContent: (ctx: VimModule.Context) => string): VimModule.FnCaller<Args, R>;
    var<V>(varName: string, expression: string): VimModule.Var<V>;
}
