export declare namespace WinLayoutFinder {
    type VimGroup = [type: 'col' | 'row', nodes: VimNode[]];
    type VimLeaf = [type: 'leaf', winid: number];
    type VimNode = VimGroup | VimLeaf;
    interface Base {
        parent?: {
            group: Group;
            indexInParent: number;
        };
    }
    interface Group extends Base {
        type: 'col' | 'row';
        children: Node[];
    }
    interface Leaf extends Base {
        type: 'leaf';
        winid: number;
    }
    type Node = Group | Leaf;
}
/**
 * Find the vim window by `winlayout()`
 *
 * @example
 * ```
 * const winFinder = WinLayoutFinder.create(tabnr);
 * const leaf = winFinder.find(winid)
 * // Parent
 * const parent = leaf.parent;
 * // Group type, 'col' or 'row'
 * const parentType = parent.group.type;
 * // Siblings
 * const siblings = parent.group.children;
 * ```
 */
export declare class WinLayoutFinder {
    readonly root: WinLayoutFinder.Node;
    private static convertVimLayoutNode;
    /**
     * Create a WinLayoutFinder instance
     *
     * @param tabnr The tabnr or use current tab with undefined
     *
     * @return Promise<WinLayoutFinder> instance
     */
    static create(tabnr?: number): Promise<WinLayoutFinder>;
    static getFirstLeafWinid(node: WinLayoutFinder.Node): number;
    constructor(root: WinLayoutFinder.Node);
    /**
     * @return [node, parent, indexInParent]
     */
    findWinid(winid: number, beginNode?: WinLayoutFinder.Node): undefined | WinLayoutFinder.Leaf;
    findClosest(beginNode: WinLayoutFinder.Node, matchWinids: number[]): WinLayoutFinder.Leaf | undefined;
}
