"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelperEventEmitter = void 0;
const coc_nvim_1 = require("coc.nvim");
class HelperEventEmitter {
    constructor(helperLogger, concurrent = false) {
        this.helperLogger = helperLogger;
        this.concurrent = concurrent;
        this.listenersMap = new Map();
    }
    listeners(event) {
        if (!this.listenersMap.has(event)) {
            const listeners = [];
            this.listenersMap.set(event, listeners);
            return listeners;
        }
        return this.listenersMap.get(event);
    }
    once(event, listener, disposables) {
        this.listeners(event).push(async (...args) => {
            const result = await listener(...args);
            disposable.dispose();
            return result;
        });
        const disposable = coc_nvim_1.Disposable.create(() => this.off(event, listener));
        if (disposables) {
            disposables.push(disposable);
        }
        return disposable;
    }
    on(event, listener, disposables) {
        this.listeners(event).push(listener);
        const disposable = coc_nvim_1.Disposable.create(() => this.off(event, listener));
        if (disposables) {
            disposables.push(disposable);
        }
        return disposable;
    }
    off(event, listener) {
        // @ts-ignore
        if (typeof listener.cancel === 'function') {
            // @ts-ignore
            listener.cancel();
        }
        const listeners = this.listeners(event);
        const index = listeners.indexOf(listener);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
    }
    async fire(event, ...args) {
        if (this.concurrent) {
            await Promise.all(this.listeners(event).map(async (listener) => {
                try {
                    await listener(...args);
                }
                catch (e) {
                    this.helperLogger.error(e);
                }
            }));
        }
        else {
            for (const listener of this.listeners(event)) {
                try {
                    await listener(...args);
                }
                catch (e) {
                    this.helperLogger.error(e);
                }
            }
        }
    }
}
exports.HelperEventEmitter = HelperEventEmitter;
