"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notifier = void 0;
const coc_nvim_1 = require("coc.nvim");
const util_1 = require("./util");
class Notifier {
    static async run(notifier) {
        if (!notifier) {
            return;
        }
        if ('then' in notifier) {
            const awaitedNotifier = await notifier;
            if (awaitedNotifier) {
                return awaitedNotifier.run();
            }
        }
        else {
            return notifier.run();
        }
    }
    static notifyAll(lazyNotifies) {
        for (const n of lazyNotifies) {
            if (n) {
                n.notify();
            }
        }
    }
    static async runAll(notifierPromises) {
        const notifiers = await Promise.all(notifierPromises);
        coc_nvim_1.workspace.nvim.pauseNotification();
        this.notifyAll(notifiers);
        return coc_nvim_1.workspace.nvim.resumeNotification();
    }
    static combine(notifiers) {
        const compactedNotifiers = (0, util_1.compactI)(notifiers);
        if (compactedNotifiers.length < 1) {
            return Notifier.noop();
        }
        if (compactedNotifiers.length === 1) {
            return compactedNotifiers[0];
        }
        return compactedNotifiers.reduce((ret, cur) => ret.concat(cur), Notifier.noop());
    }
    static noop() {
        return this.create(() => { });
    }
    static create(notify) {
        return new Notifier(notify);
    }
    constructor(notify) {
        this.notifyFns = [];
        this.notifyFns.push(notify);
    }
    async run() {
        return Notifier.runAll([this]);
    }
    notify() {
        for (const fn of this.notifyFns) {
            fn();
        }
    }
    concat(notifier) {
        this.notifyFns.push(...notifier.notifyFns);
        return this;
    }
}
exports.Notifier = Notifier;
