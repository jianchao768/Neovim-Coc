import type { Neovim } from 'coc.nvim';
import { Disposable } from 'coc.nvim';
import { FloatingUtil } from './FloatingUtil';
import { FloatingWindow } from './FloatingWindow';
export declare namespace MultiFloatingWindow {
    type CreateOptions<WinKeys extends string = string> = FloatingWindow.CreateOptions & {
        wins: Record<WinKeys, FloatingWindow.CreateOptions>;
    };
    type OpenOptions<WinKeys extends string = string> = FloatingWindow.BaseOpenOptions & {
        /**
         * @default width by 'wins'
         */
        width?: number;
        /**
         * @default height by 'wins'
         */
        height?: number;
        wins: Partial<Record<WinKeys, FloatingWindow.OpenOptions>>;
    };
}
export declare class MultiFloatingWindow<WinKeys extends string = string> implements Disposable {
    borderFloatWin: FloatingWindow;
    floatWinDict: Record<WinKeys, FloatingWindow>;
    protected util: FloatingUtil;
    static create<WinKeys extends string = string>(options: MultiFloatingWindow.CreateOptions<WinKeys>): Promise<MultiFloatingWindow<WinKeys>>;
    bufnrs: number[];
    floatWins: FloatingWindow[];
    protected disposables: Disposable[];
    protected nvim: Neovim;
    protected constructor(borderFloatWin: FloatingWindow, floatWinDict: Record<WinKeys, FloatingWindow>, util: FloatingUtil);
    opened(): Promise<boolean>;
    protected sizeByWinsOptions(winsOptions: FloatingWindow.OpenOptions[]): Promise<FloatingUtil.Size>;
    protected batchAction(notifierAction: 'openNotifier' | 'resumeNotifier' | 'resizeNotifier', options: MultiFloatingWindow.OpenOptions<WinKeys>, { reverse, updateCursorPosition }?: {
        reverse?: boolean | undefined;
        updateCursorPosition?: boolean | undefined;
    }): Promise<void>;
    open(options: MultiFloatingWindow.OpenOptions<WinKeys>): Promise<void>;
    resume(options: MultiFloatingWindow.OpenOptions<WinKeys>): Promise<void>;
    resize(options: MultiFloatingWindow.OpenOptions<WinKeys>): Promise<void>;
    win(): Promise<{
        borderWin: import("coc.nvim").Window | undefined;
        wins: (import("coc.nvim").Window | undefined)[];
    }>;
    wins(): Promise<(import("coc.nvim").Window | undefined)[]>;
    close(): Promise<void>;
    dispose(): void;
}
