"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = exports.activateHelper = void 0;
const coc_nvim_1 = require("coc.nvim");
const FloatingWindow_1 = require("./FloatingWindow");
const MultiFloatingWindow_1 = require("./MultiFloatingWindow");
const util_1 = require("./util");
const VimModule_1 = require("./VimModule");
__exportStar(require("./events"), exports);
__exportStar(require("./FloatingWindow"), exports);
__exportStar(require("./modules/buf"), exports);
__exportStar(require("./modules/floating"), exports);
__exportStar(require("./modules/util"), exports);
__exportStar(require("./MultiFloatingWindow"), exports);
__exportStar(require("./notifier"), exports);
__exportStar(require("./util"), exports);
__exportStar(require("./VimModule"), exports);
__exportStar(require("./WinLayoutFinder"), exports);
async function activateHelper(context, options = {}) {
    var _a;
    if ((_a = options.vimModule) !== null && _a !== void 0 ? _a : true) {
        await VimModule_1.VimModule.init(context);
    }
    try {
        await coc_nvim_1.workspace.nvim.command('hi default link CocHelperNormalFloatNC CocHelperNormalFloat');
    }
    catch (error) {
        void coc_nvim_1.window.showErrorMessage(error.toString());
    }
}
exports.activateHelper = activateHelper;
/**
 * Test
 */
async function activate(context) {
    await activateHelper(context);
    await util_1.helperLogger.measureTask(async () => {
        await coc_nvim_1.workspace.nvim.command('hi CocHelperNormalFloat ctermbg=Red guibg=#aa0000');
        await coc_nvim_1.workspace.nvim.command('hi CocHelperNormalFloatNC ctermbg=Red guibg=#aa0000');
        await coc_nvim_1.workspace.nvim.command('hi CocHelperNormalFloatBorder ctermbg=Black ctermfg=Grey guibg=#0000aa guifg=#ffffff');
    }, 'highlight commands');
    await util_1.helperLogger.measureTask(async () => {
        const floatWin = await FloatingWindow_1.FloatingWindow.create({
            mode: 'base',
        });
        coc_nvim_1.commands.registerCommand('testHelper-floating', util_1.helperLogger.asyncCatch(async () => {
            const text = 'hello';
            await floatWin.open({
                relative: 'cursor-around',
                lines: [text],
                top: 0,
                left: 0,
                title: 'test',
                width: 5,
                height: 5,
                border: [1, 1, 1, 0],
                padding: [],
                modifiable: true,
                focus: true,
                filetype: 'test',
                highlights: [
                    {
                        line: 0,
                        srcId: 0,
                        colStart: 0,
                        colEnd: text.length,
                        hlGroup: 'Question',
                    },
                ],
            });
            await (0, util_1.sleep)(2000);
            await floatWin.resize({
                relative: 'cursor-around',
                top: 0,
                left: 0,
                title: 'test',
                width: 10,
                height: 10,
                border: [],
                padding: [],
                winHl: 'Pmenu',
                winHlNC: 'Pmenu',
                modifiable: true,
                focus: false,
                filetype: 'test',
            });
            await (0, util_1.sleep)(2000);
            await floatWin.resize({
                relative: 'cursor-around',
                top: 0,
                left: 0,
                title: 'test',
                width: 5,
                height: 5,
                border: [1, 1, 1, 0],
                padding: [],
                modifiable: true,
                focus: false,
                filetype: 'test',
            });
        }));
    }, 'register floatWin');
    await util_1.helperLogger.measureTask(async () => {
        const multiFloatWin = await MultiFloatingWindow_1.MultiFloatingWindow.create({
            wins: {
                prompt: { mode: 'show' },
                input: { mode: 'base' },
            },
        });
        coc_nvim_1.commands.registerCommand('testHelper-multi-floating', util_1.helperLogger.asyncCatch(async () => {
            const width = 10;
            const promptText = 'input your path:';
            const promptHeight = await (0, util_1.displayHeight)(width, [promptText]);
            const inputText = '/home/users/repos';
            let inputHeight = await (0, util_1.displayHeight)(width, [inputText]);
            coc_nvim_1.events.on('TextChangedI', async (bufnr) => {
                const floatWin = multiFloatWin.floatWinDict.input;
                if (floatWin.bufnr !== bufnr) {
                    return;
                }
                const win = await floatWin.win();
                if (!win) {
                    return;
                }
                const cursor = await win.cursor;
                const width = await win.width;
                const height = await win.height;
                const lines = await floatWin.buffer.getLines();
                const newHeight = await (0, util_1.displayHeight)(width, lines, cursor, 'i');
                if (newHeight !== height) {
                    inputHeight = newHeight;
                    await resize();
                }
            });
            const getOptions = () => ({
                relative: 'cursor-around',
                top: 0,
                left: 0,
                title: 'test',
                // width,
                // height: promptHeight + inputHeight,
                border: [],
                padding: [],
                modifiable: true,
                filetype: 'test',
                wins: {
                    prompt: {
                        top: 0,
                        left: 0,
                        width,
                        height: promptHeight,
                        highlights: [
                            {
                                line: 0,
                                srcId: 0,
                                colEnd: promptText.length,
                                colStart: 0,
                                hlGroup: 'Question',
                            },
                        ],
                        lines: [promptText],
                    },
                    input: {
                        top: promptHeight,
                        left: 0,
                        width,
                        height: inputHeight,
                        lines: [inputText],
                        focus: true,
                        modifiable: true,
                        initedExecute: () => `
            if has('nvim')
              call feedkeys('A')
            endif
          `,
                    },
                },
            });
            const resize = async () => {
                await multiFloatWin.resize(getOptions());
            };
            await multiFloatWin.open(getOptions());
        }));
    }, 'register multiFloatWin');
}
exports.activate = activate;
