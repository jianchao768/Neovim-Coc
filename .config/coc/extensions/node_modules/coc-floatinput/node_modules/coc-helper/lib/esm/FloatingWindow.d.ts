import type { Buffer, BufferHighlight, Disposable } from 'coc.nvim';
import { Notifier } from './notifier';
import { FloatingUtil } from './FloatingUtil';
/**
 * @deprecated Because VimModule deprecated
 */
export declare namespace FloatingWindow {
    type Mode = 'default' | 'base' | 'show';
    type CreateInitedExecute = (context: {
        bufnr: string;
    }) => string;
    type OpenInitedExecute = (context: {
        bufnr: string;
        winid: string;
    }) => string;
    type CreateOptions = {
        /**
         * Buffer name
         */
        name?: string;
        mode?: Mode;
        initedExecute?: CreateInitedExecute;
        hasBorderBuf?: boolean;
        borderInitedExecute?: CreateInitedExecute;
    };
    type BaseOpenOptions = {
        /**
         * Relative position
         * @default 'editor'
         */
        relative?: 'center' | 'cursor' | 'cursor-around' | 'editor';
        /**
         * Top position
         * @default 0
         */
        top?: number;
        /**
         * Left position
         * @default 0
         */
        left?: number;
        /**
         * @default 0
         */
        topOffset?: number;
        /**
         * @default 0
         */
        leftOffset?: number;
        /**
         * Vim only
         */
        maxWidth?: number;
        /**
         * Vim only
         */
        maxHeight?: number;
        /**
         * Defining the padding, order is above/right/below/left.
         * Use empty list to make all with 1 padding
         */
        padding?: number[];
        /**
         * Defining the borders enable or not,
         * order is above/right/below/left.
         * Use empty list to enable all
         */
        border?: (boolean | number)[];
        /**
         * Border chars for floating window, their order is top/right/bottom/left/topleft/topright/botright/botleft
         */
        borderChars?: string[];
        borderOnly?: boolean;
        /**
         * Buffer name
         */
        name?: string;
        /**
         * Float win title
         */
        title?: string;
        filetype?: string;
        /**
         * Focus to window
         * Neovim only
         * @default false
         */
        focus?: boolean;
        /**
         * Focusable for window
         * Neovim only
         * @default true
         */
        focusable?: boolean;
        lines?: string[];
        highlights?: BufferHighlight[];
        modifiable?: boolean;
        winHl?: string;
        /**
         * Neovim only
         */
        winHlNC?: string;
        borderWinHl?: string;
        initedExecute?: OpenInitedExecute;
        borderInitedExecute?: OpenInitedExecute;
        context?: FloatingUtil.Context;
    };
    interface OpenOptions extends BaseOpenOptions {
        width: number;
        height: number;
    }
}
/**
 * @deprecated Because VimModule deprecated
 */
export declare class FloatingWindow implements Disposable {
    bufnr: number;
    borderBufnr: number | undefined;
    createOptions: FloatingWindow.CreateOptions;
    mode: FloatingWindow.Mode;
    protected util: FloatingUtil;
    static modePresets: Record<FloatingWindow.Mode, {
        modifiable?: boolean;
        focus?: boolean;
        createInitedExecute: FloatingWindow.CreateInitedExecute;
        openInitedExecute: FloatingWindow.OpenInitedExecute;
    }>;
    protected static initedContextVars: {
        create: {
            bufnr: string;
        };
        open: {
            bufnr: string;
            winid: string;
        };
    };
    protected static getInitedExecute(mode: FloatingWindow.Mode, options: FloatingWindow.CreateOptions): [initedExecute: string, borderInitedExecute: string];
    static srcId: string;
    static create(options?: FloatingWindow.CreateOptions): Promise<FloatingWindow>;
    buffer: Buffer;
    borderBuffer?: Buffer;
    nvim: import("coc.nvim").Neovim;
    protected disposables: Disposable[];
    protected constructor(bufnr: number, borderBufnr: number | undefined, createOptions: FloatingWindow.CreateOptions, mode: FloatingWindow.Mode, util: FloatingUtil);
    protected getInitedExecute(options: FloatingWindow.OpenOptions): [initedExecute: string, borderInitedExecute: string];
    protected getFocus(options: FloatingWindow.OpenOptions): boolean;
    protected getModifiable(options: FloatingWindow.OpenOptions): boolean;
    setLinesNotifier(options: FloatingWindow.OpenOptions): Notifier;
    setLines(options: FloatingWindow.OpenOptions): Promise<void>;
    opened(): Promise<boolean>;
    openNotifier(options: FloatingWindow.OpenOptions): Promise<Notifier>;
    open(options: FloatingWindow.OpenOptions): Promise<void>;
    resumeNotifier(options: FloatingWindow.OpenOptions): Promise<Notifier>;
    resume(options: FloatingWindow.OpenOptions): Promise<void>;
    resizeNotifier(options: FloatingWindow.OpenOptions): Promise<Notifier>;
    resize(options: FloatingWindow.OpenOptions): Promise<void>;
    win(): Promise<import("coc.nvim").Window | undefined>;
    borderWin(): Promise<import("coc.nvim").Window | undefined>;
    closeNotifier(): Notifier;
    close(): Promise<void>;
    dispose(): void;
}
