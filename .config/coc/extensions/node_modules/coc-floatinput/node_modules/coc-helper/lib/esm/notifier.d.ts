export declare namespace Notifier {
    type Cell = Notifier | void | undefined | null;
}
export declare class Notifier {
    static run(notifier: Notifier.Cell | Promise<Notifier.Cell>): Promise<unknown>;
    static notifyAll(lazyNotifies: Notifier.Cell[]): void;
    static runAll(notifierPromises: (Notifier.Cell | Promise<Notifier.Cell>)[]): Promise<unknown>;
    static combine(notifiers: Notifier.Cell[]): Notifier;
    static noop(): Notifier;
    static create(notify: () => void): Notifier;
    protected notifyFns: (() => void)[];
    protected constructor(notify: () => void);
    run(): Promise<unknown>;
    notify(): void;
    concat(notifier: Notifier): this;
}
