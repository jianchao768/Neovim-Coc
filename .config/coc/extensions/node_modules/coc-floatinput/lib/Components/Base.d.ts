import type { Disposable } from 'coc.nvim';
import { Emitter } from 'coc.nvim';
export declare abstract class BaseComponent<Instance, Options extends Record<string, any>, InputResult = void> implements Disposable {
    static readonly srcId = "coc-floatinput";
    protected _inited: boolean;
    protected storeOptions?: Options;
    protected readonly disposables: Disposable[];
    protected readonly closeEmitter: Emitter<InputResult | undefined>;
    get srcId(): string;
    dispose(): void;
    protected _instance?: Instance;
    protected instance(): Promise<Instance>;
    input(options: Options): Promise<InputResult | undefined>;
    opened(): Promise<boolean>;
    protected abstract _opened(instance: Instance): Promise<boolean>;
    protected abstract _create(): Promise<Instance>;
    open(options: Options): Promise<void>;
    protected abstract _open(instance: Instance, options: Options): Promise<void>;
    resize(): Promise<void>;
    protected abstract _resize(instance: Instance, options: Options): Promise<void>;
    close(inputResult?: InputResult): Promise<void>;
    protected abstract _close(instance: Instance, inputResult?: InputResult): Promise<void>;
}
