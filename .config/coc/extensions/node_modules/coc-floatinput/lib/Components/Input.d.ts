import { FloatingWindow, MultiFloatingWindow } from 'coc-helper';
import { CompletionItemProvider, Disposable, MapMode } from 'coc.nvim';
import { BaseComponent } from './Base';
export declare namespace Input {
    interface Options<Value> {
        title?: string;
        /**
         * @default true
         */
        border?: boolean;
        /**
         * @default 'center'
         */
        relative?: 'center' | 'cursor-around';
        filetype?: string;
        /**
         * @default 30
         */
        width?: number;
        prompt?: string;
        defaultValue?: Value;
        completion?: {
            short: string;
            provider: CompletionItemProvider;
        };
    }
}
declare type Instance = MultiFloatingWindow<'prompt' | 'input'>;
export declare abstract class Input<Value> extends BaseComponent<Instance, Input.Options<Value>, Value> {
    protected static maxId: number;
    protected static actionCmd: string;
    protected static inputMap: Map<number, {
        input: Input<any>;
        instance: Instance;
        inputWin: FloatingWindow;
    }>;
    protected static _inited: boolean;
    protected abstract defaultString(): Promise<string>;
    protected abstract valueToString(value: Value): Promise<string>;
    protected abstract stringToValue(str: string): Promise<Value>;
    protected abstract validateContent(str: string): Promise<boolean>;
    protected completionDisposable?: Disposable;
    protected id: number;
    protected genFiletype(): string;
    protected changeMode(mode: MapMode, targetMode: MapMode): Promise<void>;
    protected getContent(): Promise<string>;
    protected confirm(type: 'cancel' | 'ok'): Promise<void>;
    protected _init(): void;
    protected _create(): Promise<Instance>;
    protected _opened(instance: Instance): Promise<boolean>;
    textChange(mode: MapMode): Promise<void>;
    protected getFinalOpenOptions(options: Input.Options<Value>, instance: Instance, type: 'open' | 'resize', mode?: MapMode): Promise<MultiFloatingWindow.OpenOptions>;
    protected _open(instance: Instance, options: Input.Options<Value>): Promise<void>;
    protected _resize(instance: Instance, options: Input.Options<Value>): Promise<void>;
    protected _close(instance: Instance): Promise<void>;
}
export {};
