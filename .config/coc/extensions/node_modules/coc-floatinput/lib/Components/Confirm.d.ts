import { MultiFloatingWindow } from 'coc-helper';
import type { ColumnLayout } from '../column-flex-layout';
import { BaseComponent } from './Base';
export declare namespace Confirm {
    type Column<Value extends string> = {
        text: string;
        value: Value;
        width: number;
    };
    interface Options<Value extends string = 'yes' | 'no'> {
        title?: string;
        /**
         * @default true
         */
        border?: boolean;
        /**
         * @default 'center'
         */
        relative?: 'center' | 'cursor-around';
        /**
         * @default 30
         */
        width?: number;
        prompt?: string;
        /**
         * @default ['yes', 'no']
         */
        values?: Value[];
        /**
         * @default 'no'
         */
        defaultValue?: Value;
        /**
         * button texts
         */
        buttonText?: (string | undefined)[];
    }
}
type WinKeys = 'prompt' | 'btn';
type Instance = MultiFloatingWindow<WinKeys>;
export declare class Confirm<Value extends string = 'yes' | 'no'> extends BaseComponent<Instance, Confirm.Options<Value>, Value> {
    protected static actionCmd: string;
    protected static _inited: boolean;
    protected readonly defaultValues: Value[];
    protected value: Value;
    protected btnLinesLayout?: ColumnLayout<Confirm.Column<Value>>[][];
    protected _create(): Promise<Instance>;
    protected _opened(instance: Instance): Promise<boolean>;
    protected getFinalOpenOptions(options: Confirm.Options<Value>): Promise<MultiFloatingWindow.OpenOptions>;
    protected waitUserInput(instance: Instance, values: Value[]): Promise<void>;
    protected updateHighlights(instance: Instance): Promise<void>;
    protected _open(instance: Instance, options: Confirm.Options<Value>): Promise<void>;
    protected _resize(instance: Instance, options: Confirm.Options<Value>): Promise<void>;
    protected _close(instance: Instance): Promise<void>;
}
export {};
